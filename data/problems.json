{
  "1": {
    "id": 1,
    "title": "Two Sum",
    "title_slug": "two-sum",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 49.2,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table"
    ],
    "content": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "example_testcases": "[2,7,11,15]\n9",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "2": {
    "id": 2,
    "title": "Add Two Numbers",
    "title_slug": "add-two-numbers",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 38.1,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Math",
      "Recursion"
    ],
    "content": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.",
    "example_testcases": "[2,4,3]\n[5,6,4]",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "3": {
    "id": 3,
    "title": "Longest Substring Without Repeating Characters",
    "title_slug": "longest-substring-without-repeating-characters",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 33.8,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "content": "Given a string s, find the length of the longest substring without repeating characters.",
    "example_testcases": "\"abcabcbb\"",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "4": {
    "id": 4,
    "title": "Median of Two Sorted Arrays",
    "title_slug": "median-of-two-sorted-arrays",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 35.2,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Divide and Conquer"
    ],
    "content": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
    "example_testcases": "[1,3]\n[2]",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "5": {
    "id": 5,
    "title": "Longest Palindromic Substring",
    "title_slug": "longest-palindromic-substring",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 32.1,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "Given a string s, return the longest palindromic substring in s.",
    "example_testcases": "\"babad\"",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "6": {
    "id": 6,
    "title": "Zigzag Conversion",
    "title_slug": "zigzag-conversion",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 42.3,
    "paid_only": false,
    "tags": [
      "String"
    ],
    "content": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows. Write the code that will take a string and make this conversion given a number of rows.",
    "example_testcases": "\"PAYPALISHIRING\"\n3",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "7": {
    "id": 7,
    "title": "Reverse Integer",
    "title_slug": "reverse-integer",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 27.8,
    "paid_only": false,
    "tags": [
      "Math"
    ],
    "content": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.",
    "example_testcases": "123",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "8": {
    "id": 8,
    "title": "String to Integer (atoi)",
    "title_slug": "string-to-integer-atoi",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 16.9,
    "paid_only": false,
    "tags": [
      "String"
    ],
    "content": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).",
    "example_testcases": "\"42\"",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "9": {
    "id": 9,
    "title": "Palindrome Number",
    "title_slug": "palindrome-number",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 52.4,
    "paid_only": false,
    "tags": [
      "Math"
    ],
    "content": "Given an integer x, return true if x is a palindrome, and false otherwise.",
    "example_testcases": "121",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "10": {
    "id": 10,
    "title": "Regular Expression Matching",
    "title_slug": "regular-expression-matching",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 28.7,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Recursion"
    ],
    "content": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where '.' matches any single character and '*' matches zero or more of the preceding element.",
    "example_testcases": "\"aa\"\n\"a\"",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "11": {
    "id": 11,
    "title": "Container With Most Water",
    "title_slug": "container-with-most-water",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 46.5,
    "paid_only": false,
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "content": "This is the LeetCode problem: Container With Most Water. It involves working with array, two pointers, greedy concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Container With Most Water",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "12": {
    "id": 12,
    "title": "Integer to Roman",
    "title_slug": "integer-to-roman",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 48.0,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "Math",
      "String"
    ],
    "content": "This is the LeetCode problem: Integer to Roman. It involves working with hash table, math, string concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Integer to Roman",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "13": {
    "id": 13,
    "title": "Roman to Integer",
    "title_slug": "roman-to-integer",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 49.5,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "Math",
      "String"
    ],
    "content": "This is the LeetCode problem: Roman to Integer. It involves working with hash table, math, string concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Roman to Integer",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "14": {
    "id": 14,
    "title": "Longest Common Prefix",
    "title_slug": "longest-common-prefix",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 51.0,
    "paid_only": false,
    "tags": [
      "String"
    ],
    "content": "This is the LeetCode problem: Longest Common Prefix. It involves working with string concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Longest Common Prefix",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "15": {
    "id": 15,
    "title": "3Sum",
    "title_slug": "3sum",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 52.5,
    "paid_only": false,
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "content": "This is the LeetCode problem: 3Sum. It involves working with array, two pointers, sorting concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for 3Sum",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "16": {
    "id": 16,
    "title": "3Sum Closest",
    "title_slug": "3sum-closest",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 54.0,
    "paid_only": false,
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "content": "This is the LeetCode problem: 3Sum Closest. It involves working with array, two pointers, sorting concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for 3Sum Closest",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "17": {
    "id": 17,
    "title": "Letter Combinations of a Phone Number",
    "title_slug": "letter-combinations-of-a-phone-number",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 55.5,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "String",
      "Backtracking"
    ],
    "content": "This is the LeetCode problem: Letter Combinations of a Phone Number. It involves working with hash table, string, backtracking concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Letter Combinations of a Phone Number",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "18": {
    "id": 18,
    "title": "4Sum",
    "title_slug": "4sum",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 57.0,
    "paid_only": false,
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "content": "This is the LeetCode problem: 4Sum. It involves working with array, two pointers, sorting concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for 4Sum",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "19": {
    "id": 19,
    "title": "Remove Nth Node From End of List",
    "title_slug": "remove-nth-node-from-end-of-list",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 58.5,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "content": "This is the LeetCode problem: Remove Nth Node From End of List. It involves working with linked list, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Remove Nth Node From End of List",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "20": {
    "id": 20,
    "title": "Valid Parentheses",
    "title_slug": "valid-parentheses",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 60.0,
    "paid_only": false,
    "tags": [
      "String",
      "Stack"
    ],
    "content": "This is the LeetCode problem: Valid Parentheses. It involves working with string, stack concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Valid Parentheses",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "21": {
    "id": 21,
    "title": "Merge Two Sorted Lists",
    "title_slug": "merge-two-sorted-lists",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 61.5,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Recursion"
    ],
    "content": "This is the LeetCode problem: Merge Two Sorted Lists. It involves working with linked list, recursion concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Merge Two Sorted Lists",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "22": {
    "id": 22,
    "title": "Generate Parentheses",
    "title_slug": "generate-parentheses",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 63.0,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Backtracking"
    ],
    "content": "This is the LeetCode problem: Generate Parentheses. It involves working with string, dynamic programming, backtracking concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Generate Parentheses",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "23": {
    "id": 23,
    "title": "Merge k Sorted Lists",
    "title_slug": "merge-k-sorted-lists",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 64.5,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Divide and Conquer",
      "Heap"
    ],
    "content": "This is the LeetCode problem: Merge k Sorted Lists. It involves working with linked list, divide and conquer, heap concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Merge k Sorted Lists",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "24": {
    "id": 24,
    "title": "Swap Nodes in Pairs",
    "title_slug": "swap-nodes-in-pairs",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 66.0,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Recursion"
    ],
    "content": "This is the LeetCode problem: Swap Nodes in Pairs. It involves working with linked list, recursion concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Swap Nodes in Pairs",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "25": {
    "id": 25,
    "title": "Reverse Nodes in k-Group",
    "title_slug": "reverse-nodes-in-k-group",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 67.5,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Recursion"
    ],
    "content": "This is the LeetCode problem: Reverse Nodes in k-Group. It involves working with linked list, recursion concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Reverse Nodes in k-Group",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "26": {
    "id": 26,
    "title": "Remove Duplicates from Sorted Array",
    "title_slug": "remove-duplicates-from-sorted-array",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 69.0,
    "paid_only": false,
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "content": "This is the LeetCode problem: Remove Duplicates from Sorted Array. It involves working with array, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Remove Duplicates from Sorted Array",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "27": {
    "id": 27,
    "title": "Remove Element",
    "title_slug": "remove-element",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 70.5,
    "paid_only": false,
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "content": "This is the LeetCode problem: Remove Element. It involves working with array, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Remove Element",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "28": {
    "id": 28,
    "title": "Find the Index of the First Occurrence in a String",
    "title_slug": "find-the-index-of-the-first-occurrence-in-a-string",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 72.0,
    "paid_only": false,
    "tags": [
      "String",
      "Two Pointers",
      "String Matching"
    ],
    "content": "This is the LeetCode problem: Find the Index of the First Occurrence in a String. It involves working with string, two pointers, string matching concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Find the Index of the First Occurrence in a String",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "29": {
    "id": 29,
    "title": "Divide Two Integers",
    "title_slug": "divide-two-integers",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 73.5,
    "paid_only": false,
    "tags": [
      "Math",
      "Bit Manipulation"
    ],
    "content": "This is the LeetCode problem: Divide Two Integers. It involves working with math, bit manipulation concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Divide Two Integers",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "30": {
    "id": 30,
    "title": "Substring with Concatenation of All Words",
    "title_slug": "substring-with-concatenation-of-all-words",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 75.0,
    "paid_only": false,
    "tags": [
      "String",
      "Hash Table",
      "Sliding Window"
    ],
    "content": "This is the LeetCode problem: Substring with Concatenation of All Words. It involves working with string, hash table, sliding window concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for Substring with Concatenation of All Words",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "31": {
    "id": 31,
    "title": "Problem 31",
    "title_slug": "problem-31",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 67,
    "paid_only": false,
    "tags": [
      "Trie"
    ],
    "content": "This is problem #31 in the LeetCode collection. It involves working with trie concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 31",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "32": {
    "id": 32,
    "title": "Problem 32",
    "title_slug": "problem-32",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 69,
    "paid_only": false,
    "tags": [
      "Segment Tree"
    ],
    "content": "This is problem #32 in the LeetCode collection. It involves working with segment tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 32",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "33": {
    "id": 33,
    "title": "Problem 33",
    "title_slug": "problem-33",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 71,
    "paid_only": false,
    "tags": [
      "Binary Indexed Tree"
    ],
    "content": "This is problem #33 in the LeetCode collection. It involves working with binary indexed tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 33",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "34": {
    "id": 34,
    "title": "Problem 34",
    "title_slug": "problem-34",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 73,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table"
    ],
    "content": "This is problem #34 in the LeetCode collection. It involves working with array, hash table concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 34",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "35": {
    "id": 35,
    "title": "Problem 35",
    "title_slug": "problem-35",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 75,
    "paid_only": false,
    "tags": [
      "String",
      "Two Pointers"
    ],
    "content": "This is problem #35 in the LeetCode collection. It involves working with string, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 35",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "36": {
    "id": 36,
    "title": "Problem 36",
    "title_slug": "problem-36",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 77,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Math"
    ],
    "content": "This is problem #36 in the LeetCode collection. It involves working with linked list, math concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 36",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "37": {
    "id": 37,
    "title": "Problem 37",
    "title_slug": "problem-37",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 79,
    "paid_only": false,
    "tags": [
      "Tree",
      "Depth-First Search"
    ],
    "content": "This is problem #37 in the LeetCode collection. It involves working with tree, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 37",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "38": {
    "id": 38,
    "title": "Problem 38",
    "title_slug": "problem-38",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 81,
    "paid_only": false,
    "tags": [
      "Tree",
      "Breadth-First Search"
    ],
    "content": "This is problem #38 in the LeetCode collection. It involves working with tree, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 38",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "39": {
    "id": 39,
    "title": "Problem 39",
    "title_slug": "problem-39",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 83,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "This is problem #39 in the LeetCode collection. It involves working with dynamic programming concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 39",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "40": {
    "id": 40,
    "title": "Problem 40",
    "title_slug": "problem-40",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 45,
    "paid_only": false,
    "tags": [
      "Backtracking"
    ],
    "content": "This is problem #40 in the LeetCode collection. It involves working with backtracking concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 40",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "41": {
    "id": 41,
    "title": "Problem 41",
    "title_slug": "problem-41",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 47,
    "paid_only": false,
    "tags": [
      "Greedy"
    ],
    "content": "This is problem #41 in the LeetCode collection. It involves working with greedy concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 41",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "42": {
    "id": 42,
    "title": "Problem 42",
    "title_slug": "problem-42",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 49,
    "paid_only": false,
    "tags": [
      "Binary Search"
    ],
    "content": "This is problem #42 in the LeetCode collection. It involves working with binary search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 42",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "43": {
    "id": 43,
    "title": "Problem 43",
    "title_slug": "problem-43",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 51,
    "paid_only": false,
    "tags": [
      "Stack",
      "Queue"
    ],
    "content": "This is problem #43 in the LeetCode collection. It involves working with stack, queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 43",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "44": {
    "id": 44,
    "title": "Problem 44",
    "title_slug": "problem-44",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 53,
    "paid_only": false,
    "tags": [
      "Heap",
      "Priority Queue"
    ],
    "content": "This is problem #44 in the LeetCode collection. It involves working with heap, priority queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 44",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "45": {
    "id": 45,
    "title": "Problem 45",
    "title_slug": "problem-45",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 55,
    "paid_only": false,
    "tags": [
      "Graph",
      "Breadth-First Search"
    ],
    "content": "This is problem #45 in the LeetCode collection. It involves working with graph, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 45",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "46": {
    "id": 46,
    "title": "Problem 46",
    "title_slug": "problem-46",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 57,
    "paid_only": false,
    "tags": [
      "Graph",
      "Depth-First Search"
    ],
    "content": "This is problem #46 in the LeetCode collection. It involves working with graph, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 46",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "47": {
    "id": 47,
    "title": "Problem 47",
    "title_slug": "problem-47",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 59,
    "paid_only": false,
    "tags": [
      "Union Find"
    ],
    "content": "This is problem #47 in the LeetCode collection. It involves working with union find concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 47",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "48": {
    "id": 48,
    "title": "Problem 48",
    "title_slug": "problem-48",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 61,
    "paid_only": false,
    "tags": [
      "Trie"
    ],
    "content": "This is problem #48 in the LeetCode collection. It involves working with trie concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 48",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "49": {
    "id": 49,
    "title": "Problem 49",
    "title_slug": "problem-49",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 63,
    "paid_only": false,
    "tags": [
      "Segment Tree"
    ],
    "content": "This is problem #49 in the LeetCode collection. It involves working with segment tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 49",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "50": {
    "id": 50,
    "title": "Problem 50",
    "title_slug": "problem-50",
    "difficulty": "EASY",
    "status": "NOT_STARTED",
    "ac_rate": 65,
    "paid_only": false,
    "tags": [
      "Binary Indexed Tree"
    ],
    "content": "This is problem #50 in the LeetCode collection. It involves working with binary indexed tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 50",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "51": {
    "id": 51,
    "title": "Problem 51",
    "title_slug": "problem-51",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 61.5,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table"
    ],
    "content": "This is problem #51 in the LeetCode collection. It involves working with array, hash table concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 51",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "52": {
    "id": 52,
    "title": "Problem 52",
    "title_slug": "problem-52",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 63.0,
    "paid_only": false,
    "tags": [
      "String",
      "Two Pointers"
    ],
    "content": "This is problem #52 in the LeetCode collection. It involves working with string, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 52",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "53": {
    "id": 53,
    "title": "Problem 53",
    "title_slug": "problem-53",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 64.5,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Math"
    ],
    "content": "This is problem #53 in the LeetCode collection. It involves working with linked list, math concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 53",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "54": {
    "id": 54,
    "title": "Problem 54",
    "title_slug": "problem-54",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 66.0,
    "paid_only": false,
    "tags": [
      "Tree",
      "Depth-First Search"
    ],
    "content": "This is problem #54 in the LeetCode collection. It involves working with tree, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 54",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "55": {
    "id": 55,
    "title": "Problem 55",
    "title_slug": "problem-55",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 67.5,
    "paid_only": false,
    "tags": [
      "Tree",
      "Breadth-First Search"
    ],
    "content": "This is problem #55 in the LeetCode collection. It involves working with tree, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 55",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "56": {
    "id": 56,
    "title": "Problem 56",
    "title_slug": "problem-56",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 69.0,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "This is problem #56 in the LeetCode collection. It involves working with dynamic programming concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 56",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "57": {
    "id": 57,
    "title": "Problem 57",
    "title_slug": "problem-57",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 70.5,
    "paid_only": false,
    "tags": [
      "Backtracking"
    ],
    "content": "This is problem #57 in the LeetCode collection. It involves working with backtracking concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 57",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "58": {
    "id": 58,
    "title": "Problem 58",
    "title_slug": "problem-58",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 72.0,
    "paid_only": false,
    "tags": [
      "Greedy"
    ],
    "content": "This is problem #58 in the LeetCode collection. It involves working with greedy concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 58",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "59": {
    "id": 59,
    "title": "Problem 59",
    "title_slug": "problem-59",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 73.5,
    "paid_only": false,
    "tags": [
      "Binary Search"
    ],
    "content": "This is problem #59 in the LeetCode collection. It involves working with binary search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 59",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "60": {
    "id": 60,
    "title": "Problem 60",
    "title_slug": "problem-60",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 30.0,
    "paid_only": false,
    "tags": [
      "Stack",
      "Queue"
    ],
    "content": "This is problem #60 in the LeetCode collection. It involves working with stack, queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 60",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "61": {
    "id": 61,
    "title": "Problem 61",
    "title_slug": "problem-61",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 31.5,
    "paid_only": false,
    "tags": [
      "Heap",
      "Priority Queue"
    ],
    "content": "This is problem #61 in the LeetCode collection. It involves working with heap, priority queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 61",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "62": {
    "id": 62,
    "title": "Problem 62",
    "title_slug": "problem-62",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 33.0,
    "paid_only": false,
    "tags": [
      "Graph",
      "Breadth-First Search"
    ],
    "content": "This is problem #62 in the LeetCode collection. It involves working with graph, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 62",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "63": {
    "id": 63,
    "title": "Problem 63",
    "title_slug": "problem-63",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 34.5,
    "paid_only": false,
    "tags": [
      "Graph",
      "Depth-First Search"
    ],
    "content": "This is problem #63 in the LeetCode collection. It involves working with graph, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 63",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "64": {
    "id": 64,
    "title": "Problem 64",
    "title_slug": "problem-64",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 36.0,
    "paid_only": false,
    "tags": [
      "Union Find"
    ],
    "content": "This is problem #64 in the LeetCode collection. It involves working with union find concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 64",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "65": {
    "id": 65,
    "title": "Problem 65",
    "title_slug": "problem-65",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 37.5,
    "paid_only": false,
    "tags": [
      "Trie"
    ],
    "content": "This is problem #65 in the LeetCode collection. It involves working with trie concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 65",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "66": {
    "id": 66,
    "title": "Problem 66",
    "title_slug": "problem-66",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 39.0,
    "paid_only": false,
    "tags": [
      "Segment Tree"
    ],
    "content": "This is problem #66 in the LeetCode collection. It involves working with segment tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 66",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "67": {
    "id": 67,
    "title": "Problem 67",
    "title_slug": "problem-67",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 40.5,
    "paid_only": false,
    "tags": [
      "Binary Indexed Tree"
    ],
    "content": "This is problem #67 in the LeetCode collection. It involves working with binary indexed tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 67",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "68": {
    "id": 68,
    "title": "Problem 68",
    "title_slug": "problem-68",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 42.0,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table"
    ],
    "content": "This is problem #68 in the LeetCode collection. It involves working with array, hash table concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 68",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "69": {
    "id": 69,
    "title": "Problem 69",
    "title_slug": "problem-69",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 43.5,
    "paid_only": false,
    "tags": [
      "String",
      "Two Pointers"
    ],
    "content": "This is problem #69 in the LeetCode collection. It involves working with string, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 69",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "70": {
    "id": 70,
    "title": "Problem 70",
    "title_slug": "problem-70",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 45.0,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Math"
    ],
    "content": "This is problem #70 in the LeetCode collection. It involves working with linked list, math concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 70",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "71": {
    "id": 71,
    "title": "Problem 71",
    "title_slug": "problem-71",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 46.5,
    "paid_only": false,
    "tags": [
      "Tree",
      "Depth-First Search"
    ],
    "content": "This is problem #71 in the LeetCode collection. It involves working with tree, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 71",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "72": {
    "id": 72,
    "title": "Problem 72",
    "title_slug": "problem-72",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 48.0,
    "paid_only": false,
    "tags": [
      "Tree",
      "Breadth-First Search"
    ],
    "content": "This is problem #72 in the LeetCode collection. It involves working with tree, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 72",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "73": {
    "id": 73,
    "title": "Problem 73",
    "title_slug": "problem-73",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 49.5,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "This is problem #73 in the LeetCode collection. It involves working with dynamic programming concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 73",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "74": {
    "id": 74,
    "title": "Problem 74",
    "title_slug": "problem-74",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 51.0,
    "paid_only": false,
    "tags": [
      "Backtracking"
    ],
    "content": "This is problem #74 in the LeetCode collection. It involves working with backtracking concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 74",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "75": {
    "id": 75,
    "title": "Problem 75",
    "title_slug": "problem-75",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 52.5,
    "paid_only": false,
    "tags": [
      "Greedy"
    ],
    "content": "This is problem #75 in the LeetCode collection. It involves working with greedy concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 75",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "76": {
    "id": 76,
    "title": "Problem 76",
    "title_slug": "problem-76",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 54.0,
    "paid_only": false,
    "tags": [
      "Binary Search"
    ],
    "content": "This is problem #76 in the LeetCode collection. It involves working with binary search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 76",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "77": {
    "id": 77,
    "title": "Problem 77",
    "title_slug": "problem-77",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 55.5,
    "paid_only": false,
    "tags": [
      "Stack",
      "Queue"
    ],
    "content": "This is problem #77 in the LeetCode collection. It involves working with stack, queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 77",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "78": {
    "id": 78,
    "title": "Problem 78",
    "title_slug": "problem-78",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 57.0,
    "paid_only": false,
    "tags": [
      "Heap",
      "Priority Queue"
    ],
    "content": "This is problem #78 in the LeetCode collection. It involves working with heap, priority queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 78",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "79": {
    "id": 79,
    "title": "Problem 79",
    "title_slug": "problem-79",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 58.5,
    "paid_only": false,
    "tags": [
      "Graph",
      "Breadth-First Search"
    ],
    "content": "This is problem #79 in the LeetCode collection. It involves working with graph, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 79",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "80": {
    "id": 80,
    "title": "Problem 80",
    "title_slug": "problem-80",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 60.0,
    "paid_only": false,
    "tags": [
      "Graph",
      "Depth-First Search"
    ],
    "content": "This is problem #80 in the LeetCode collection. It involves working with graph, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 80",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "81": {
    "id": 81,
    "title": "Problem 81",
    "title_slug": "problem-81",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 61.5,
    "paid_only": false,
    "tags": [
      "Union Find"
    ],
    "content": "This is problem #81 in the LeetCode collection. It involves working with union find concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 81",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "82": {
    "id": 82,
    "title": "Problem 82",
    "title_slug": "problem-82",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 63.0,
    "paid_only": false,
    "tags": [
      "Trie"
    ],
    "content": "This is problem #82 in the LeetCode collection. It involves working with trie concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 82",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "83": {
    "id": 83,
    "title": "Problem 83",
    "title_slug": "problem-83",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 64.5,
    "paid_only": false,
    "tags": [
      "Segment Tree"
    ],
    "content": "This is problem #83 in the LeetCode collection. It involves working with segment tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 83",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "84": {
    "id": 84,
    "title": "Problem 84",
    "title_slug": "problem-84",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 66.0,
    "paid_only": false,
    "tags": [
      "Binary Indexed Tree"
    ],
    "content": "This is problem #84 in the LeetCode collection. It involves working with binary indexed tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 84",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "85": {
    "id": 85,
    "title": "Problem 85",
    "title_slug": "problem-85",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 67.5,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table"
    ],
    "content": "This is problem #85 in the LeetCode collection. It involves working with array, hash table concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 85",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "86": {
    "id": 86,
    "title": "Problem 86",
    "title_slug": "problem-86",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 69.0,
    "paid_only": false,
    "tags": [
      "String",
      "Two Pointers"
    ],
    "content": "This is problem #86 in the LeetCode collection. It involves working with string, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 86",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "87": {
    "id": 87,
    "title": "Problem 87",
    "title_slug": "problem-87",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 70.5,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Math"
    ],
    "content": "This is problem #87 in the LeetCode collection. It involves working with linked list, math concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 87",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "88": {
    "id": 88,
    "title": "Problem 88",
    "title_slug": "problem-88",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 72.0,
    "paid_only": false,
    "tags": [
      "Tree",
      "Depth-First Search"
    ],
    "content": "This is problem #88 in the LeetCode collection. It involves working with tree, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 88",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "89": {
    "id": 89,
    "title": "Problem 89",
    "title_slug": "problem-89",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 73.5,
    "paid_only": false,
    "tags": [
      "Tree",
      "Breadth-First Search"
    ],
    "content": "This is problem #89 in the LeetCode collection. It involves working with tree, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 89",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "90": {
    "id": 90,
    "title": "Problem 90",
    "title_slug": "problem-90",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 30.0,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "This is problem #90 in the LeetCode collection. It involves working with dynamic programming concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 90",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "91": {
    "id": 91,
    "title": "Problem 91",
    "title_slug": "problem-91",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 31.5,
    "paid_only": false,
    "tags": [
      "Backtracking"
    ],
    "content": "This is problem #91 in the LeetCode collection. It involves working with backtracking concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 91",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "92": {
    "id": 92,
    "title": "Problem 92",
    "title_slug": "problem-92",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 33.0,
    "paid_only": false,
    "tags": [
      "Greedy"
    ],
    "content": "This is problem #92 in the LeetCode collection. It involves working with greedy concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 92",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "93": {
    "id": 93,
    "title": "Problem 93",
    "title_slug": "problem-93",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 34.5,
    "paid_only": false,
    "tags": [
      "Binary Search"
    ],
    "content": "This is problem #93 in the LeetCode collection. It involves working with binary search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 93",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "94": {
    "id": 94,
    "title": "Problem 94",
    "title_slug": "problem-94",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 36.0,
    "paid_only": false,
    "tags": [
      "Stack",
      "Queue"
    ],
    "content": "This is problem #94 in the LeetCode collection. It involves working with stack, queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 94",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "95": {
    "id": 95,
    "title": "Problem 95",
    "title_slug": "problem-95",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 37.5,
    "paid_only": false,
    "tags": [
      "Heap",
      "Priority Queue"
    ],
    "content": "This is problem #95 in the LeetCode collection. It involves working with heap, priority queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 95",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "96": {
    "id": 96,
    "title": "Problem 96",
    "title_slug": "problem-96",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 39.0,
    "paid_only": false,
    "tags": [
      "Graph",
      "Breadth-First Search"
    ],
    "content": "This is problem #96 in the LeetCode collection. It involves working with graph, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 96",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "97": {
    "id": 97,
    "title": "Problem 97",
    "title_slug": "problem-97",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 40.5,
    "paid_only": false,
    "tags": [
      "Graph",
      "Depth-First Search"
    ],
    "content": "This is problem #97 in the LeetCode collection. It involves working with graph, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 97",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "98": {
    "id": 98,
    "title": "Problem 98",
    "title_slug": "problem-98",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 42.0,
    "paid_only": false,
    "tags": [
      "Union Find"
    ],
    "content": "This is problem #98 in the LeetCode collection. It involves working with union find concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 98",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "99": {
    "id": 99,
    "title": "Problem 99",
    "title_slug": "problem-99",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 43.5,
    "paid_only": false,
    "tags": [
      "Trie"
    ],
    "content": "This is problem #99 in the LeetCode collection. It involves working with trie concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 99",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "100": {
    "id": 100,
    "title": "Problem 100",
    "title_slug": "problem-100",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 45.0,
    "paid_only": false,
    "tags": [
      "Segment Tree"
    ],
    "content": "This is problem #100 in the LeetCode collection. It involves working with segment tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 100",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "101": {
    "id": 101,
    "title": "Problem 101",
    "title_slug": "problem-101",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 46.5,
    "paid_only": false,
    "tags": [
      "Binary Indexed Tree"
    ],
    "content": "This is problem #101 in the LeetCode collection. It involves working with binary indexed tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 101",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "102": {
    "id": 102,
    "title": "Problem 102",
    "title_slug": "problem-102",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 48.0,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table"
    ],
    "content": "This is problem #102 in the LeetCode collection. It involves working with array, hash table concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 102",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "103": {
    "id": 103,
    "title": "Problem 103",
    "title_slug": "problem-103",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 49.5,
    "paid_only": false,
    "tags": [
      "String",
      "Two Pointers"
    ],
    "content": "This is problem #103 in the LeetCode collection. It involves working with string, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 103",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "104": {
    "id": 104,
    "title": "Problem 104",
    "title_slug": "problem-104",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 51.0,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Math"
    ],
    "content": "This is problem #104 in the LeetCode collection. It involves working with linked list, math concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 104",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "105": {
    "id": 105,
    "title": "Problem 105",
    "title_slug": "problem-105",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 52.5,
    "paid_only": false,
    "tags": [
      "Tree",
      "Depth-First Search"
    ],
    "content": "This is problem #105 in the LeetCode collection. It involves working with tree, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 105",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "106": {
    "id": 106,
    "title": "Problem 106",
    "title_slug": "problem-106",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 54.0,
    "paid_only": false,
    "tags": [
      "Tree",
      "Breadth-First Search"
    ],
    "content": "This is problem #106 in the LeetCode collection. It involves working with tree, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 106",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "107": {
    "id": 107,
    "title": "Problem 107",
    "title_slug": "problem-107",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 55.5,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "This is problem #107 in the LeetCode collection. It involves working with dynamic programming concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 107",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "108": {
    "id": 108,
    "title": "Problem 108",
    "title_slug": "problem-108",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 57.0,
    "paid_only": false,
    "tags": [
      "Backtracking"
    ],
    "content": "This is problem #108 in the LeetCode collection. It involves working with backtracking concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 108",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "109": {
    "id": 109,
    "title": "Problem 109",
    "title_slug": "problem-109",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 58.5,
    "paid_only": false,
    "tags": [
      "Greedy"
    ],
    "content": "This is problem #109 in the LeetCode collection. It involves working with greedy concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 109",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "110": {
    "id": 110,
    "title": "Problem 110",
    "title_slug": "problem-110",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 60.0,
    "paid_only": false,
    "tags": [
      "Binary Search"
    ],
    "content": "This is problem #110 in the LeetCode collection. It involves working with binary search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 110",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "111": {
    "id": 111,
    "title": "Problem 111",
    "title_slug": "problem-111",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 61.5,
    "paid_only": false,
    "tags": [
      "Stack",
      "Queue"
    ],
    "content": "This is problem #111 in the LeetCode collection. It involves working with stack, queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 111",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "112": {
    "id": 112,
    "title": "Problem 112",
    "title_slug": "problem-112",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 63.0,
    "paid_only": false,
    "tags": [
      "Heap",
      "Priority Queue"
    ],
    "content": "This is problem #112 in the LeetCode collection. It involves working with heap, priority queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 112",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "113": {
    "id": 113,
    "title": "Problem 113",
    "title_slug": "problem-113",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 64.5,
    "paid_only": false,
    "tags": [
      "Graph",
      "Breadth-First Search"
    ],
    "content": "This is problem #113 in the LeetCode collection. It involves working with graph, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 113",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "114": {
    "id": 114,
    "title": "Problem 114",
    "title_slug": "problem-114",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 66.0,
    "paid_only": false,
    "tags": [
      "Graph",
      "Depth-First Search"
    ],
    "content": "This is problem #114 in the LeetCode collection. It involves working with graph, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 114",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "115": {
    "id": 115,
    "title": "Problem 115",
    "title_slug": "problem-115",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 67.5,
    "paid_only": false,
    "tags": [
      "Union Find"
    ],
    "content": "This is problem #115 in the LeetCode collection. It involves working with union find concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 115",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "116": {
    "id": 116,
    "title": "Problem 116",
    "title_slug": "problem-116",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 69.0,
    "paid_only": false,
    "tags": [
      "Trie"
    ],
    "content": "This is problem #116 in the LeetCode collection. It involves working with trie concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 116",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "117": {
    "id": 117,
    "title": "Problem 117",
    "title_slug": "problem-117",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 70.5,
    "paid_only": false,
    "tags": [
      "Segment Tree"
    ],
    "content": "This is problem #117 in the LeetCode collection. It involves working with segment tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 117",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "118": {
    "id": 118,
    "title": "Problem 118",
    "title_slug": "problem-118",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 72.0,
    "paid_only": false,
    "tags": [
      "Binary Indexed Tree"
    ],
    "content": "This is problem #118 in the LeetCode collection. It involves working with binary indexed tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 118",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "119": {
    "id": 119,
    "title": "Problem 119",
    "title_slug": "problem-119",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 73.5,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table"
    ],
    "content": "This is problem #119 in the LeetCode collection. It involves working with array, hash table concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 119",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "120": {
    "id": 120,
    "title": "Problem 120",
    "title_slug": "problem-120",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 30.0,
    "paid_only": false,
    "tags": [
      "String",
      "Two Pointers"
    ],
    "content": "This is problem #120 in the LeetCode collection. It involves working with string, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 120",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "121": {
    "id": 121,
    "title": "Problem 121",
    "title_slug": "problem-121",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 31.5,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Math"
    ],
    "content": "This is problem #121 in the LeetCode collection. It involves working with linked list, math concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 121",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "122": {
    "id": 122,
    "title": "Problem 122",
    "title_slug": "problem-122",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 33.0,
    "paid_only": false,
    "tags": [
      "Tree",
      "Depth-First Search"
    ],
    "content": "This is problem #122 in the LeetCode collection. It involves working with tree, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 122",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "123": {
    "id": 123,
    "title": "Problem 123",
    "title_slug": "problem-123",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 34.5,
    "paid_only": false,
    "tags": [
      "Tree",
      "Breadth-First Search"
    ],
    "content": "This is problem #123 in the LeetCode collection. It involves working with tree, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 123",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "124": {
    "id": 124,
    "title": "Problem 124",
    "title_slug": "problem-124",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 36.0,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "This is problem #124 in the LeetCode collection. It involves working with dynamic programming concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 124",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "125": {
    "id": 125,
    "title": "Problem 125",
    "title_slug": "problem-125",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 37.5,
    "paid_only": false,
    "tags": [
      "Backtracking"
    ],
    "content": "This is problem #125 in the LeetCode collection. It involves working with backtracking concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 125",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "126": {
    "id": 126,
    "title": "Problem 126",
    "title_slug": "problem-126",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 39.0,
    "paid_only": false,
    "tags": [
      "Greedy"
    ],
    "content": "This is problem #126 in the LeetCode collection. It involves working with greedy concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 126",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "127": {
    "id": 127,
    "title": "Problem 127",
    "title_slug": "problem-127",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 40.5,
    "paid_only": false,
    "tags": [
      "Binary Search"
    ],
    "content": "This is problem #127 in the LeetCode collection. It involves working with binary search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 127",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "128": {
    "id": 128,
    "title": "Problem 128",
    "title_slug": "problem-128",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 42.0,
    "paid_only": false,
    "tags": [
      "Stack",
      "Queue"
    ],
    "content": "This is problem #128 in the LeetCode collection. It involves working with stack, queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 128",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "129": {
    "id": 129,
    "title": "Problem 129",
    "title_slug": "problem-129",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 43.5,
    "paid_only": false,
    "tags": [
      "Heap",
      "Priority Queue"
    ],
    "content": "This is problem #129 in the LeetCode collection. It involves working with heap, priority queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 129",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "130": {
    "id": 130,
    "title": "Problem 130",
    "title_slug": "problem-130",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 45.0,
    "paid_only": false,
    "tags": [
      "Graph",
      "Breadth-First Search"
    ],
    "content": "This is problem #130 in the LeetCode collection. It involves working with graph, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 130",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "131": {
    "id": 131,
    "title": "Problem 131",
    "title_slug": "problem-131",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 46.5,
    "paid_only": false,
    "tags": [
      "Graph",
      "Depth-First Search"
    ],
    "content": "This is problem #131 in the LeetCode collection. It involves working with graph, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 131",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "132": {
    "id": 132,
    "title": "Problem 132",
    "title_slug": "problem-132",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 48.0,
    "paid_only": false,
    "tags": [
      "Union Find"
    ],
    "content": "This is problem #132 in the LeetCode collection. It involves working with union find concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 132",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "133": {
    "id": 133,
    "title": "Problem 133",
    "title_slug": "problem-133",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 49.5,
    "paid_only": false,
    "tags": [
      "Trie"
    ],
    "content": "This is problem #133 in the LeetCode collection. It involves working with trie concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 133",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "134": {
    "id": 134,
    "title": "Problem 134",
    "title_slug": "problem-134",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 51.0,
    "paid_only": false,
    "tags": [
      "Segment Tree"
    ],
    "content": "This is problem #134 in the LeetCode collection. It involves working with segment tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 134",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "135": {
    "id": 135,
    "title": "Problem 135",
    "title_slug": "problem-135",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 52.5,
    "paid_only": false,
    "tags": [
      "Binary Indexed Tree"
    ],
    "content": "This is problem #135 in the LeetCode collection. It involves working with binary indexed tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 135",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "136": {
    "id": 136,
    "title": "Problem 136",
    "title_slug": "problem-136",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 54.0,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table"
    ],
    "content": "This is problem #136 in the LeetCode collection. It involves working with array, hash table concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 136",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "137": {
    "id": 137,
    "title": "Problem 137",
    "title_slug": "problem-137",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 55.5,
    "paid_only": false,
    "tags": [
      "String",
      "Two Pointers"
    ],
    "content": "This is problem #137 in the LeetCode collection. It involves working with string, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 137",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "138": {
    "id": 138,
    "title": "Problem 138",
    "title_slug": "problem-138",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 57.0,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Math"
    ],
    "content": "This is problem #138 in the LeetCode collection. It involves working with linked list, math concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 138",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "139": {
    "id": 139,
    "title": "Problem 139",
    "title_slug": "problem-139",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 58.5,
    "paid_only": false,
    "tags": [
      "Tree",
      "Depth-First Search"
    ],
    "content": "This is problem #139 in the LeetCode collection. It involves working with tree, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 139",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "140": {
    "id": 140,
    "title": "Problem 140",
    "title_slug": "problem-140",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 60.0,
    "paid_only": false,
    "tags": [
      "Tree",
      "Breadth-First Search"
    ],
    "content": "This is problem #140 in the LeetCode collection. It involves working with tree, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 140",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "141": {
    "id": 141,
    "title": "Problem 141",
    "title_slug": "problem-141",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 61.5,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "This is problem #141 in the LeetCode collection. It involves working with dynamic programming concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 141",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "142": {
    "id": 142,
    "title": "Problem 142",
    "title_slug": "problem-142",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 63.0,
    "paid_only": false,
    "tags": [
      "Backtracking"
    ],
    "content": "This is problem #142 in the LeetCode collection. It involves working with backtracking concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 142",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "143": {
    "id": 143,
    "title": "Problem 143",
    "title_slug": "problem-143",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 64.5,
    "paid_only": false,
    "tags": [
      "Greedy"
    ],
    "content": "This is problem #143 in the LeetCode collection. It involves working with greedy concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 143",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "144": {
    "id": 144,
    "title": "Problem 144",
    "title_slug": "problem-144",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 66.0,
    "paid_only": false,
    "tags": [
      "Binary Search"
    ],
    "content": "This is problem #144 in the LeetCode collection. It involves working with binary search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 144",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "145": {
    "id": 145,
    "title": "Problem 145",
    "title_slug": "problem-145",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 67.5,
    "paid_only": false,
    "tags": [
      "Stack",
      "Queue"
    ],
    "content": "This is problem #145 in the LeetCode collection. It involves working with stack, queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 145",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "146": {
    "id": 146,
    "title": "Problem 146",
    "title_slug": "problem-146",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 69.0,
    "paid_only": false,
    "tags": [
      "Heap",
      "Priority Queue"
    ],
    "content": "This is problem #146 in the LeetCode collection. It involves working with heap, priority queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 146",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "147": {
    "id": 147,
    "title": "Problem 147",
    "title_slug": "problem-147",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 70.5,
    "paid_only": false,
    "tags": [
      "Graph",
      "Breadth-First Search"
    ],
    "content": "This is problem #147 in the LeetCode collection. It involves working with graph, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 147",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "148": {
    "id": 148,
    "title": "Problem 148",
    "title_slug": "problem-148",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 72.0,
    "paid_only": false,
    "tags": [
      "Graph",
      "Depth-First Search"
    ],
    "content": "This is problem #148 in the LeetCode collection. It involves working with graph, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 148",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "149": {
    "id": 149,
    "title": "Problem 149",
    "title_slug": "problem-149",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 73.5,
    "paid_only": false,
    "tags": [
      "Union Find"
    ],
    "content": "This is problem #149 in the LeetCode collection. It involves working with union find concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 149",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "150": {
    "id": 150,
    "title": "Problem 150",
    "title_slug": "problem-150",
    "difficulty": "MEDIUM",
    "status": "NOT_STARTED",
    "ac_rate": 30.0,
    "paid_only": false,
    "tags": [
      "Trie"
    ],
    "content": "This is problem #150 in the LeetCode collection. It involves working with trie concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 150",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "151": {
    "id": 151,
    "title": "Problem 151",
    "title_slug": "problem-151",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 21.2,
    "paid_only": false,
    "tags": [
      "Segment Tree"
    ],
    "content": "This is problem #151 in the LeetCode collection. It involves working with segment tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 151",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "152": {
    "id": 152,
    "title": "Problem 152",
    "title_slug": "problem-152",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 22.4,
    "paid_only": false,
    "tags": [
      "Binary Indexed Tree"
    ],
    "content": "This is problem #152 in the LeetCode collection. It involves working with binary indexed tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 152",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "153": {
    "id": 153,
    "title": "Problem 153",
    "title_slug": "problem-153",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 23.6,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table"
    ],
    "content": "This is problem #153 in the LeetCode collection. It involves working with array, hash table concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 153",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "154": {
    "id": 154,
    "title": "Problem 154",
    "title_slug": "problem-154",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 24.8,
    "paid_only": false,
    "tags": [
      "String",
      "Two Pointers"
    ],
    "content": "This is problem #154 in the LeetCode collection. It involves working with string, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 154",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "155": {
    "id": 155,
    "title": "Problem 155",
    "title_slug": "problem-155",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 26.0,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Math"
    ],
    "content": "This is problem #155 in the LeetCode collection. It involves working with linked list, math concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 155",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "156": {
    "id": 156,
    "title": "Problem 156",
    "title_slug": "problem-156",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 27.2,
    "paid_only": false,
    "tags": [
      "Tree",
      "Depth-First Search"
    ],
    "content": "This is problem #156 in the LeetCode collection. It involves working with tree, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 156",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "157": {
    "id": 157,
    "title": "Problem 157",
    "title_slug": "problem-157",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 28.4,
    "paid_only": false,
    "tags": [
      "Tree",
      "Breadth-First Search"
    ],
    "content": "This is problem #157 in the LeetCode collection. It involves working with tree, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 157",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "158": {
    "id": 158,
    "title": "Problem 158",
    "title_slug": "problem-158",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 29.6,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "This is problem #158 in the LeetCode collection. It involves working with dynamic programming concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 158",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "159": {
    "id": 159,
    "title": "Problem 159",
    "title_slug": "problem-159",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 30.8,
    "paid_only": false,
    "tags": [
      "Backtracking"
    ],
    "content": "This is problem #159 in the LeetCode collection. It involves working with backtracking concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 159",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "160": {
    "id": 160,
    "title": "Problem 160",
    "title_slug": "problem-160",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 32.0,
    "paid_only": false,
    "tags": [
      "Greedy"
    ],
    "content": "This is problem #160 in the LeetCode collection. It involves working with greedy concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 160",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "161": {
    "id": 161,
    "title": "Problem 161",
    "title_slug": "problem-161",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 33.2,
    "paid_only": false,
    "tags": [
      "Binary Search"
    ],
    "content": "This is problem #161 in the LeetCode collection. It involves working with binary search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 161",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "162": {
    "id": 162,
    "title": "Problem 162",
    "title_slug": "problem-162",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 34.4,
    "paid_only": false,
    "tags": [
      "Stack",
      "Queue"
    ],
    "content": "This is problem #162 in the LeetCode collection. It involves working with stack, queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 162",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "163": {
    "id": 163,
    "title": "Problem 163",
    "title_slug": "problem-163",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 35.6,
    "paid_only": false,
    "tags": [
      "Heap",
      "Priority Queue"
    ],
    "content": "This is problem #163 in the LeetCode collection. It involves working with heap, priority queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 163",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "164": {
    "id": 164,
    "title": "Problem 164",
    "title_slug": "problem-164",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 36.8,
    "paid_only": false,
    "tags": [
      "Graph",
      "Breadth-First Search"
    ],
    "content": "This is problem #164 in the LeetCode collection. It involves working with graph, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 164",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "165": {
    "id": 165,
    "title": "Problem 165",
    "title_slug": "problem-165",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 38.0,
    "paid_only": false,
    "tags": [
      "Graph",
      "Depth-First Search"
    ],
    "content": "This is problem #165 in the LeetCode collection. It involves working with graph, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 165",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "166": {
    "id": 166,
    "title": "Problem 166",
    "title_slug": "problem-166",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 39.2,
    "paid_only": false,
    "tags": [
      "Union Find"
    ],
    "content": "This is problem #166 in the LeetCode collection. It involves working with union find concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 166",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "167": {
    "id": 167,
    "title": "Problem 167",
    "title_slug": "problem-167",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 40.4,
    "paid_only": false,
    "tags": [
      "Trie"
    ],
    "content": "This is problem #167 in the LeetCode collection. It involves working with trie concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 167",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "168": {
    "id": 168,
    "title": "Problem 168",
    "title_slug": "problem-168",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 41.6,
    "paid_only": false,
    "tags": [
      "Segment Tree"
    ],
    "content": "This is problem #168 in the LeetCode collection. It involves working with segment tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 168",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "169": {
    "id": 169,
    "title": "Problem 169",
    "title_slug": "problem-169",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 42.8,
    "paid_only": false,
    "tags": [
      "Binary Indexed Tree"
    ],
    "content": "This is problem #169 in the LeetCode collection. It involves working with binary indexed tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 169",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "170": {
    "id": 170,
    "title": "Problem 170",
    "title_slug": "problem-170",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 44.0,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table"
    ],
    "content": "This is problem #170 in the LeetCode collection. It involves working with array, hash table concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 170",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "171": {
    "id": 171,
    "title": "Problem 171",
    "title_slug": "problem-171",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 45.2,
    "paid_only": false,
    "tags": [
      "String",
      "Two Pointers"
    ],
    "content": "This is problem #171 in the LeetCode collection. It involves working with string, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 171",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "172": {
    "id": 172,
    "title": "Problem 172",
    "title_slug": "problem-172",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 46.4,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Math"
    ],
    "content": "This is problem #172 in the LeetCode collection. It involves working with linked list, math concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 172",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "173": {
    "id": 173,
    "title": "Problem 173",
    "title_slug": "problem-173",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 47.6,
    "paid_only": false,
    "tags": [
      "Tree",
      "Depth-First Search"
    ],
    "content": "This is problem #173 in the LeetCode collection. It involves working with tree, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 173",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "174": {
    "id": 174,
    "title": "Problem 174",
    "title_slug": "problem-174",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 48.8,
    "paid_only": false,
    "tags": [
      "Tree",
      "Breadth-First Search"
    ],
    "content": "This is problem #174 in the LeetCode collection. It involves working with tree, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 174",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "175": {
    "id": 175,
    "title": "Problem 175",
    "title_slug": "problem-175",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 20.0,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "This is problem #175 in the LeetCode collection. It involves working with dynamic programming concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 175",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "176": {
    "id": 176,
    "title": "Problem 176",
    "title_slug": "problem-176",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 21.2,
    "paid_only": false,
    "tags": [
      "Backtracking"
    ],
    "content": "This is problem #176 in the LeetCode collection. It involves working with backtracking concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 176",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "177": {
    "id": 177,
    "title": "Problem 177",
    "title_slug": "problem-177",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 22.4,
    "paid_only": false,
    "tags": [
      "Greedy"
    ],
    "content": "This is problem #177 in the LeetCode collection. It involves working with greedy concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 177",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "178": {
    "id": 178,
    "title": "Problem 178",
    "title_slug": "problem-178",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 23.6,
    "paid_only": false,
    "tags": [
      "Binary Search"
    ],
    "content": "This is problem #178 in the LeetCode collection. It involves working with binary search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 178",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "179": {
    "id": 179,
    "title": "Problem 179",
    "title_slug": "problem-179",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 24.8,
    "paid_only": false,
    "tags": [
      "Stack",
      "Queue"
    ],
    "content": "This is problem #179 in the LeetCode collection. It involves working with stack, queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 179",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "180": {
    "id": 180,
    "title": "Problem 180",
    "title_slug": "problem-180",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 26.0,
    "paid_only": false,
    "tags": [
      "Heap",
      "Priority Queue"
    ],
    "content": "This is problem #180 in the LeetCode collection. It involves working with heap, priority queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 180",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "181": {
    "id": 181,
    "title": "Problem 181",
    "title_slug": "problem-181",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 27.2,
    "paid_only": false,
    "tags": [
      "Graph",
      "Breadth-First Search"
    ],
    "content": "This is problem #181 in the LeetCode collection. It involves working with graph, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 181",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "182": {
    "id": 182,
    "title": "Problem 182",
    "title_slug": "problem-182",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 28.4,
    "paid_only": false,
    "tags": [
      "Graph",
      "Depth-First Search"
    ],
    "content": "This is problem #182 in the LeetCode collection. It involves working with graph, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 182",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "183": {
    "id": 183,
    "title": "Problem 183",
    "title_slug": "problem-183",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 29.6,
    "paid_only": false,
    "tags": [
      "Union Find"
    ],
    "content": "This is problem #183 in the LeetCode collection. It involves working with union find concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 183",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "184": {
    "id": 184,
    "title": "Problem 184",
    "title_slug": "problem-184",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 30.8,
    "paid_only": false,
    "tags": [
      "Trie"
    ],
    "content": "This is problem #184 in the LeetCode collection. It involves working with trie concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 184",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "185": {
    "id": 185,
    "title": "Problem 185",
    "title_slug": "problem-185",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 32.0,
    "paid_only": false,
    "tags": [
      "Segment Tree"
    ],
    "content": "This is problem #185 in the LeetCode collection. It involves working with segment tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 185",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "186": {
    "id": 186,
    "title": "Problem 186",
    "title_slug": "problem-186",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 33.2,
    "paid_only": false,
    "tags": [
      "Binary Indexed Tree"
    ],
    "content": "This is problem #186 in the LeetCode collection. It involves working with binary indexed tree concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 186",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "187": {
    "id": 187,
    "title": "Problem 187",
    "title_slug": "problem-187",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 34.4,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table"
    ],
    "content": "This is problem #187 in the LeetCode collection. It involves working with array, hash table concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 187",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "188": {
    "id": 188,
    "title": "Problem 188",
    "title_slug": "problem-188",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 35.6,
    "paid_only": false,
    "tags": [
      "String",
      "Two Pointers"
    ],
    "content": "This is problem #188 in the LeetCode collection. It involves working with string, two pointers concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 188",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "189": {
    "id": 189,
    "title": "Problem 189",
    "title_slug": "problem-189",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 36.8,
    "paid_only": false,
    "tags": [
      "Linked List",
      "Math"
    ],
    "content": "This is problem #189 in the LeetCode collection. It involves working with linked list, math concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 189",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "190": {
    "id": 190,
    "title": "Problem 190",
    "title_slug": "problem-190",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 38.0,
    "paid_only": false,
    "tags": [
      "Tree",
      "Depth-First Search"
    ],
    "content": "This is problem #190 in the LeetCode collection. It involves working with tree, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 190",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "191": {
    "id": 191,
    "title": "Problem 191",
    "title_slug": "problem-191",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 39.2,
    "paid_only": false,
    "tags": [
      "Tree",
      "Breadth-First Search"
    ],
    "content": "This is problem #191 in the LeetCode collection. It involves working with tree, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 191",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "192": {
    "id": 192,
    "title": "Problem 192",
    "title_slug": "problem-192",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 40.4,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "This is problem #192 in the LeetCode collection. It involves working with dynamic programming concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 192",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "193": {
    "id": 193,
    "title": "Problem 193",
    "title_slug": "problem-193",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 41.6,
    "paid_only": false,
    "tags": [
      "Backtracking"
    ],
    "content": "This is problem #193 in the LeetCode collection. It involves working with backtracking concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 193",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "194": {
    "id": 194,
    "title": "Problem 194",
    "title_slug": "problem-194",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 42.8,
    "paid_only": false,
    "tags": [
      "Greedy"
    ],
    "content": "This is problem #194 in the LeetCode collection. It involves working with greedy concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 194",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "195": {
    "id": 195,
    "title": "Problem 195",
    "title_slug": "problem-195",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 44.0,
    "paid_only": false,
    "tags": [
      "Binary Search"
    ],
    "content": "This is problem #195 in the LeetCode collection. It involves working with binary search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 195",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "196": {
    "id": 196,
    "title": "Problem 196",
    "title_slug": "problem-196",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 45.2,
    "paid_only": false,
    "tags": [
      "Stack",
      "Queue"
    ],
    "content": "This is problem #196 in the LeetCode collection. It involves working with stack, queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 196",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "197": {
    "id": 197,
    "title": "Problem 197",
    "title_slug": "problem-197",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 46.4,
    "paid_only": false,
    "tags": [
      "Heap",
      "Priority Queue"
    ],
    "content": "This is problem #197 in the LeetCode collection. It involves working with heap, priority queue concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 197",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "198": {
    "id": 198,
    "title": "Problem 198",
    "title_slug": "problem-198",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 47.6,
    "paid_only": false,
    "tags": [
      "Graph",
      "Breadth-First Search"
    ],
    "content": "This is problem #198 in the LeetCode collection. It involves working with graph, breadth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 198",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "199": {
    "id": 199,
    "title": "Problem 199",
    "title_slug": "problem-199",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 48.8,
    "paid_only": false,
    "tags": [
      "Graph",
      "Depth-First Search"
    ],
    "content": "This is problem #199 in the LeetCode collection. It involves working with graph, depth-first search concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 199",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "200": {
    "id": 200,
    "title": "Problem 200",
    "title_slug": "problem-200",
    "difficulty": "HARD",
    "status": "NOT_STARTED",
    "ac_rate": 20.0,
    "paid_only": false,
    "tags": [
      "Union Find"
    ],
    "content": "This is problem #200 in the LeetCode collection. It involves working with union find concepts and requires efficient algorithmic thinking.",
    "example_testcases": "Example input for problem 200",
    "code_snippets": [],
    "last_updated": "2025-08-18T22:46:41.938863"
  },
  "213": {
    "id": 213,
    "title": "House Robber II",
    "title_slug": "house-robber-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 43.90750063157376,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:37.870256"
  },
  "221": {
    "id": 221,
    "title": "Maximal Square",
    "title_slug": "maximal-square",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 49.099990279603986,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:38.496301"
  },
  "233": {
    "id": 233,
    "title": "Number of Digit One",
    "title_slug": "number-of-digit-one",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 36.27645522590607,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Recursion"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:39.083086"
  },
  "241": {
    "id": 241,
    "title": "Different Ways to Add Parentheses",
    "title_slug": "different-ways-to-add-parentheses",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 72.55783614897332,
    "paid_only": false,
    "tags": [
      "Math",
      "String",
      "Dynamic Programming",
      "Recursion",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:39.831530"
  },
  "256": {
    "id": 256,
    "title": "Paint House",
    "title_slug": "paint-house",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 63.848027197541754,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:40.612873"
  },
  "264": {
    "id": 264,
    "title": "Ugly Number II",
    "title_slug": "ugly-number-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 49.317929837758534,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Heap (Priority Queue)"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:41.633218"
  },
  "265": {
    "id": 265,
    "title": "Paint House II",
    "title_slug": "paint-house-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 56.54259994790989,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:42.187494"
  },
  "276": {
    "id": 276,
    "title": "Paint Fence",
    "title_slug": "paint-fence",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 47.88579453452947,
    "paid_only": true,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:43.100846"
  },
  "279": {
    "id": 279,
    "title": "Perfect Squares",
    "title_slug": "perfect-squares",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 55.86694793079814,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Breadth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:43.858379"
  },
  "294": {
    "id": 294,
    "title": "Flip Game II",
    "title_slug": "flip-game-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 52.195361566260836,
    "paid_only": true,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Memoization",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:44.399929"
  },
  "300": {
    "id": 300,
    "title": "Longest Increasing Subsequence",
    "title_slug": "longest-increasing-subsequence",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 58.22660282946822,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:44.793294"
  },
  "309": {
    "id": 309,
    "title": "Best Time to Buy and Sell Stock with Cooldown",
    "title_slug": "best-time-to-buy-and-sell-stock-with-cooldown",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 60.88609138949778,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:45.613372"
  },
  "312": {
    "id": 312,
    "title": "Burst Balloons",
    "title_slug": "burst-balloons",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 61.89893518406565,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:46.139181"
  },
  "313": {
    "id": 313,
    "title": "Super Ugly Number",
    "title_slug": "super-ugly-number",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 45.538182726003456,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:46.890708"
  },
  "322": {
    "id": 322,
    "title": "Coin Change",
    "title_slug": "coin-change",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 46.965367954679145,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Breadth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:47.608023"
  },
  "329": {
    "id": 329,
    "title": "Longest Increasing Path in a Matrix",
    "title_slug": "longest-increasing-path-in-a-matrix",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 55.62184582239117,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:48.130547"
  },
  "333": {
    "id": 333,
    "title": "Largest BST Subtree",
    "title_slug": "largest-bst-subtree",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 45.670537204595405,
    "paid_only": true,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:49.114180"
  },
  "337": {
    "id": 337,
    "title": "House Robber III",
    "title_slug": "house-robber-iii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 55.11505908472132,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:50.184966"
  },
  "338": {
    "id": 338,
    "title": "Counting Bits",
    "title_slug": "counting-bits",
    "difficulty": "Easy",
    "status": "NOT_STARTED",
    "ac_rate": 79.93449003874024,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:50.983140"
  },
  "343": {
    "id": 343,
    "title": "Integer Break",
    "title_slug": "integer-break",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 61.31804855095196,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:51.876926"
  },
  "351": {
    "id": 351,
    "title": "Android Unlock Patterns",
    "title_slug": "android-unlock-patterns",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 53.44812883334973,
    "paid_only": true,
    "tags": [
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:52.815057"
  },
  "354": {
    "id": 354,
    "title": "Russian Doll Envelopes",
    "title_slug": "russian-doll-envelopes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 37.43756740183122,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:53.297376"
  },
  "357": {
    "id": 357,
    "title": "Count Numbers with Unique Digits",
    "title_slug": "count-numbers-with-unique-digits",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 54.61127397388391,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Backtracking"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:53.955158"
  },
  "361": {
    "id": 361,
    "title": "Bomb Enemy",
    "title_slug": "bomb-enemy",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 52.69755004518613,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:54.528102"
  },
  "368": {
    "id": 368,
    "title": "Largest Divisible Subset",
    "title_slug": "largest-divisible-subset",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 49.008021792482914,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:55.478244"
  },
  "375": {
    "id": 375,
    "title": "Guess Number Higher or Lower II",
    "title_slug": "guess-number-higher-or-lower-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.509816158397335,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:56.364040"
  },
  "376": {
    "id": 376,
    "title": "Wiggle Subsequence",
    "title_slug": "wiggle-subsequence",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 48.96494485558174,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:57.247161"
  },
  "377": {
    "id": 377,
    "title": "Combination Sum IV",
    "title_slug": "combination-sum-iv",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 54.714795251050816,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:57.892260"
  },
  "392": {
    "id": 392,
    "title": "Is Subsequence",
    "title_slug": "is-subsequence",
    "difficulty": "Easy",
    "status": "NOT_STARTED",
    "ac_rate": 48.53333012096357,
    "paid_only": false,
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:58.613246"
  },
  "396": {
    "id": 396,
    "title": "Rotate Function",
    "title_slug": "rotate-function",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 44.38086637897351,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:59.287203"
  },
  "397": {
    "id": 397,
    "title": "Integer Replacement",
    "title_slug": "integer-replacement",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 36.69970822074869,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Bit Manipulation",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:19:59.754388"
  },
  "403": {
    "id": 403,
    "title": "Frog Jump",
    "title_slug": "frog-jump",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 46.71021217171945,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:00.602273"
  },
  "410": {
    "id": 410,
    "title": "Split Array Largest Sum",
    "title_slug": "split-array-largest-sum",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 58.69620736649166,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:01.143252"
  },
  "413": {
    "id": 413,
    "title": "Arithmetic Slices",
    "title_slug": "arithmetic-slices",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 64.80622347949081,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:01.994710"
  },
  "416": {
    "id": 416,
    "title": "Partition Equal Subset Sum",
    "title_slug": "partition-equal-subset-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 48.719180903072214,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:02.629606"
  },
  "418": {
    "id": 418,
    "title": "Sentence Screen Fitting",
    "title_slug": "sentence-screen-fitting",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 36.35662517860524,
    "paid_only": true,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:03.592520"
  },
  "435": {
    "id": 435,
    "title": "Non-overlapping Intervals",
    "title_slug": "non-overlapping-intervals",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 55.888425318555136,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:04.553382"
  },
  "446": {
    "id": 446,
    "title": "Arithmetic Slices II - Subsequence",
    "title_slug": "arithmetic-slices-ii-subsequence",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 54.581083051094545,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:04.985401"
  },
  "458": {
    "id": 458,
    "title": "Poor Pigs",
    "title_slug": "poor-pigs",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 59.14742285796743,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:05.799462"
  },
  "464": {
    "id": 464,
    "title": "Can I Win",
    "title_slug": "can-i-win",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 30.548038347243555,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization",
      "Game Theory",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:06.518456"
  },
  "465": {
    "id": 465,
    "title": "Optimal Account Balancing",
    "title_slug": "optimal-account-balancing",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 50.060626976206244,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:07.429534"
  },
  "466": {
    "id": 466,
    "title": "Count The Repetitions",
    "title_slug": "count-the-repetitions",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 32.352507275726566,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:07.996040"
  },
  "467": {
    "id": 467,
    "title": "Unique Substrings in Wraparound String",
    "title_slug": "unique-substrings-in-wraparound-string",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 41.58070376209416,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:08.959607"
  },
  "471": {
    "id": 471,
    "title": "Encode String with Shortest Length",
    "title_slug": "encode-string-with-shortest-length",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 50.48104491876394,
    "paid_only": true,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:09.467223"
  },
  "472": {
    "id": 472,
    "title": "Concatenated Words",
    "title_slug": "concatenated-words",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 49.52137941999368,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming",
      "Depth-First Search",
      "Trie",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:10.919813"
  },
  "473": {
    "id": 473,
    "title": "Matchsticks to Square",
    "title_slug": "matchsticks-to-square",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 41.129324597006544,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:11.885700"
  },
  "474": {
    "id": 474,
    "title": "Ones and Zeroes",
    "title_slug": "ones-and-zeroes",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 49.11666407740692,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:12.754933"
  },
  "486": {
    "id": 486,
    "title": "Predict the Winner",
    "title_slug": "predict-the-winner",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 55.87462939432444,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Recursion",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:13.400745"
  },
  "487": {
    "id": 487,
    "title": "Max Consecutive Ones II",
    "title_slug": "max-consecutive-ones-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.66265800717422,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:14.908463"
  },
  "488": {
    "id": 488,
    "title": "Zuma Game",
    "title_slug": "zuma-game",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 31.172743684386035,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Stack",
      "Breadth-First Search",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:15.733398"
  },
  "494": {
    "id": 494,
    "title": "Target Sum",
    "title_slug": "target-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.129009332884415,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:16.742044"
  },
  "1013": {
    "id": 1013,
    "title": "Fibonacci Number",
    "title_slug": "fibonacci-number",
    "difficulty": "Easy",
    "status": "NOT_STARTED",
    "ac_rate": 73.25332659831378,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Recursion",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:17.679413"
  },
  "514": {
    "id": 514,
    "title": "Freedom Trail",
    "title_slug": "freedom-trail",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 58.976079694583625,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:18.636229"
  },
  "516": {
    "id": 516,
    "title": "Longest Palindromic Subsequence",
    "title_slug": "longest-palindromic-subsequence",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 64.48662511469101,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:19.360550"
  },
  "518": {
    "id": 518,
    "title": "Coin Change II",
    "title_slug": "coin-change-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 61.51292404862018,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:20.136530"
  },
  "526": {
    "id": 526,
    "title": "Beautiful Arrangement",
    "title_slug": "beautiful-arrangement",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 64.60582144875343,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:21.091162"
  },
  "542": {
    "id": 542,
    "title": "01 Matrix",
    "title_slug": "01-matrix",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 52.1430692623016,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Breadth-First Search",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:22.082386"
  },
  "546": {
    "id": 546,
    "title": "Remove Boxes",
    "title_slug": "remove-boxes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 48.51274101346769,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:22.799430"
  },
  "552": {
    "id": 552,
    "title": "Student Attendance Record II",
    "title_slug": "student-attendance-record-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 56.00637465519919,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:23.324508"
  },
  "553": {
    "id": 553,
    "title": "Optimal Division",
    "title_slug": "optimal-division",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 62.068785007590435,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:24.205867"
  },
  "562": {
    "id": 562,
    "title": "Longest Line of Consecutive One in Matrix",
    "title_slug": "longest-line-of-consecutive-one-in-matrix",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 50.52530920098539,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:24.915976"
  },
  "568": {
    "id": 568,
    "title": "Maximum Vacation Days",
    "title_slug": "maximum-vacation-days",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 46.47052062981267,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:25.707670"
  },
  "576": {
    "id": 576,
    "title": "Out of Boundary Paths",
    "title_slug": "out-of-boundary-paths",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 48.21709428780309,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:26.593968"
  },
  "583": {
    "id": 583,
    "title": "Delete Operation for Two Strings",
    "title_slug": "delete-operation-for-two-strings",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 64.35764713002136,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:26.994580"
  },
  "600": {
    "id": 600,
    "title": "Non-negative Integers without Consecutive Ones",
    "title_slug": "non-negative-integers-without-consecutive-ones",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 40.56793521410046,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:27.592007"
  },
  "629": {
    "id": 629,
    "title": "K Inverse Pairs Array",
    "title_slug": "k-inverse-pairs-array",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 48.98844656086174,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:28.458012"
  },
  "634": {
    "id": 634,
    "title": "Find the Derangement of An Array",
    "title_slug": "find-the-derangement-of-an-array",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 41.74821064278552,
    "paid_only": true,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:28.980875"
  },
  "638": {
    "id": 638,
    "title": "Shopping Offers",
    "title_slug": "shopping-offers",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 52.009654887608846,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Memoization",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:29.621638"
  },
  "639": {
    "id": 639,
    "title": "Decode Ways II",
    "title_slug": "decode-ways-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 31.351053749264977,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:30.539033"
  },
  "646": {
    "id": 646,
    "title": "Maximum Length of Pair Chain",
    "title_slug": "maximum-length-of-pair-chain",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 61.107687862008596,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:30.967660"
  },
  "647": {
    "id": 647,
    "title": "Palindromic Substrings",
    "title_slug": "palindromic-substrings",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 71.95194984828943,
    "paid_only": false,
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:31.474090"
  },
  "650": {
    "id": 650,
    "title": "2 Keys Keyboard",
    "title_slug": "2-keys-keyboard",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 59.16950745091146,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:32.405625"
  },
  "651": {
    "id": 651,
    "title": "4 Keys Keyboard",
    "title_slug": "4-keys-keyboard",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 55.900929428478506,
    "paid_only": true,
    "tags": [
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:33.085000"
  },
  "656": {
    "id": 656,
    "title": "Coin Path",
    "title_slug": "coin-path",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 32.51493894518057,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:34.007624"
  },
  "664": {
    "id": 664,
    "title": "Strange Printer",
    "title_slug": "strange-printer",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 60.78102605383543,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:34.410369"
  },
  "673": {
    "id": 673,
    "title": "Number of Longest Increasing Subsequence",
    "title_slug": "number-of-longest-increasing-subsequence",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 50.43293576731028,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:34.989279"
  },
  "678": {
    "id": 678,
    "title": "Valid Parenthesis String",
    "title_slug": "valid-parenthesis-string",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 39.20642886842293,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Stack",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:35.426274"
  },
  "688": {
    "id": 688,
    "title": "Knight Probability in Chessboard",
    "title_slug": "knight-probability-in-chessboard",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 56.68270951062342,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:35.860188"
  },
  "689": {
    "id": 689,
    "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
    "title_slug": "maximum-sum-of-3-non-overlapping-subarrays",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 59.533204302940234,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:36.919701"
  },
  "691": {
    "id": 691,
    "title": "Stickers to Spell Word",
    "title_slug": "stickers-to-spell-word",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 50.19506926612076,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Memoization",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:37.646199"
  },
  "698": {
    "id": 698,
    "title": "Partition to K Equal Sum Subsets",
    "title_slug": "partition-to-k-equal-sum-subsets",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 38.18119973174179,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Memoization",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:38.398193"
  },
  "712": {
    "id": 712,
    "title": "Minimum ASCII Delete Sum for Two Strings",
    "title_slug": "minimum-ascii-delete-sum-for-two-strings",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 65.89179438820827,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:39.228929"
  },
  "714": {
    "id": 714,
    "title": "Best Time to Buy and Sell Stock with Transaction Fee",
    "title_slug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 70.96712237635228,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:40.199173"
  },
  "718": {
    "id": 718,
    "title": "Maximum Length of Repeated Subarray",
    "title_slug": "maximum-length-of-repeated-subarray",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.07462473067329,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sliding Window",
      "Rolling Hash",
      "Hash Function"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:40.971733"
  },
  "727": {
    "id": 727,
    "title": "Minimum Window Subsequence",
    "title_slug": "minimum-window-subsequence",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 43.60708404200751,
    "paid_only": true,
    "tags": [
      "String",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:41.462430"
  },
  "730": {
    "id": 730,
    "title": "Count Different Palindromic Subsequences",
    "title_slug": "count-different-palindromic-subsequences",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 46.74930766187524,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:41.902262"
  },
  "740": {
    "id": 740,
    "title": "Delete and Earn",
    "title_slug": "delete-and-earn",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 56.84585068750872,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:42.724145"
  },
  "741": {
    "id": 741,
    "title": "Cherry Pickup",
    "title_slug": "cherry-pickup",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 38.2187125996221,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:43.586054"
  },
  "747": {
    "id": 747,
    "title": "Min Cost Climbing Stairs",
    "title_slug": "min-cost-climbing-stairs",
    "difficulty": "Easy",
    "status": "NOT_STARTED",
    "ac_rate": 67.45313702167694,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:44.607527"
  },
  "751": {
    "id": 751,
    "title": "Number Of Corner Rectangles",
    "title_slug": "number-of-corner-rectangles",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 67.82576182464013,
    "paid_only": true,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:45.084138"
  },
  "769": {
    "id": 769,
    "title": "Largest Plus Sign",
    "title_slug": "largest-plus-sign",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 48.674882837990154,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:45.507773"
  },
  "787": {
    "id": 787,
    "title": "Sliding Puzzle",
    "title_slug": "sliding-puzzle",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 73.25812659532495,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Breadth-First Search",
      "Memoization",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:46.580400"
  },
  "803": {
    "id": 803,
    "title": "Cheapest Flights Within K Stops",
    "title_slug": "cheapest-flights-within-k-stops",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 40.7070407509802,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:47.420724"
  },
  "804": {
    "id": 804,
    "title": "Rotated Digits",
    "title_slug": "rotated-digits",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 56.511385622860544,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:48.155733"
  },
  "806": {
    "id": 806,
    "title": "Domino and Tromino Tiling",
    "title_slug": "domino-and-tromino-tiling",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.80402560015227,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:49.076231"
  },
  "808": {
    "id": 808,
    "title": "Number of Matching Subsequences",
    "title_slug": "number-of-matching-subsequences",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 50.65337871639185,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Binary Search",
      "Dynamic Programming",
      "Trie",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:49.977389"
  },
  "815": {
    "id": 815,
    "title": "Champagne Tower",
    "title_slug": "champagne-tower",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 58.363493368351,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:50.528387"
  },
  "819": {
    "id": 819,
    "title": "Minimum Swaps To Make Sequences Increasing",
    "title_slug": "minimum-swaps-to-make-sequences-increasing",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 40.92352233318384,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:51.152667"
  },
  "823": {
    "id": 823,
    "title": "Split Array With Same Average",
    "title_slug": "split-array-with-same-average",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 26.192932443733635,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:52.030289"
  },
  "826": {
    "id": 826,
    "title": "Soup Servings",
    "title_slug": "soup-servings",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 60.01645396231458,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Probability and Statistics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:52.592045"
  },
  "831": {
    "id": 831,
    "title": "Largest Sum of Averages",
    "title_slug": "largest-sum-of-averages",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 54.28621505564806,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:53.590602"
  },
  "836": {
    "id": 836,
    "title": "Race Car",
    "title_slug": "race-car",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 44.23701623331897,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:54.001383"
  },
  "843": {
    "id": 843,
    "title": "Binary Trees With Factors",
    "title_slug": "binary-trees-with-factors",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 52.95148518557588,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:54.555021"
  },
  "855": {
    "id": 855,
    "title": "Count Unique Characters of All Substrings of a Given String",
    "title_slug": "count-unique-characters-of-all-substrings-of-a-given-string",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 53.05636096437224,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:55.158092"
  },
  "863": {
    "id": 863,
    "title": "Sum of Distances in Tree",
    "title_slug": "sum-of-distances-in-tree",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 65.38820515339648,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Graph"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:55.720395"
  },
  "867": {
    "id": 867,
    "title": "New 21 Game",
    "title_slug": "new-21-game",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 52.18713426207171,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Sliding Window",
      "Probability and Statistics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:56.405963"
  },
  "868": {
    "id": 868,
    "title": "Push Dominoes",
    "title_slug": "push-dominoes",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 63.03806970204465,
    "paid_only": false,
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:57.102366"
  },
  "875": {
    "id": 875,
    "title": "Longest Mountain in Array",
    "title_slug": "longest-mountain-in-array",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 41.248134832445274,
    "paid_only": false,
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Enumeration"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:57.650417"
  },
  "877": {
    "id": 877,
    "title": "Shortest Path Visiting All Nodes",
    "title_slug": "shortest-path-visiting-all-nodes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 65.52376925967681,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Breadth-First Search",
      "Graph",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:58.356079"
  },
  "902": {
    "id": 902,
    "title": "Minimum Number of Refueling Stops",
    "title_slug": "minimum-number-of-refueling-stops",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 40.71777625978667,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:59.056644"
  },
  "905": {
    "id": 905,
    "title": "Length of Longest Fibonacci Subsequence",
    "title_slug": "length-of-longest-fibonacci-subsequence",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 57.59676647999876,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:20:59.650504"
  },
  "909": {
    "id": 909,
    "title": "Stone Game",
    "title_slug": "stone-game",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 71.79186429246909,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:00.278568"
  },
  "911": {
    "id": 911,
    "title": "Profitable Schemes",
    "title_slug": "profitable-schemes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 48.0415349647801,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:00.986647"
  },
  "923": {
    "id": 923,
    "title": "Super Egg Drop",
    "title_slug": "super-egg-drop",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 29.07549991691132,
    "paid_only": false,
    "tags": [
      "Math",
      "Binary Search",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:01.606942"
  },
  "930": {
    "id": 930,
    "title": "All Possible Full Binary Trees",
    "title_slug": "all-possible-full-binary-trees",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 82.7118657792029,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Recursion",
      "Memoization",
      "Binary Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:02.304423"
  },
  "934": {
    "id": 934,
    "title": "Bitwise ORs of Subarrays",
    "title_slug": "bitwise-ors-of-subarrays",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 56.42496895128802,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:02.812364"
  },
  "938": {
    "id": 938,
    "title": "Numbers At Most N Given Digit Set",
    "title_slug": "numbers-at-most-n-given-digit-set",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 43.64404573927227,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "String",
      "Binary Search",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:03.608100"
  },
  "939": {
    "id": 939,
    "title": "Valid Permutations for DI Sequence",
    "title_slug": "valid-permutations-for-di-sequence",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 56.393892401288326,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:04.166045"
  },
  "943": {
    "id": 943,
    "title": "Sum of Subarray Minimums",
    "title_slug": "sum-of-subarray-minimums",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 37.82650212128171,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Monotonic Stack"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:04.726936"
  },
  "949": {
    "id": 949,
    "title": "Cat and Mouse",
    "title_slug": "cat-and-mouse",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 33.905567139878315,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:05.704613"
  },
  "954": {
    "id": 954,
    "title": "Maximum Sum Circular Subarray",
    "title_slug": "maximum-sum-circular-subarray",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 48.17561901280494,
    "paid_only": false,
    "tags": [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming",
      "Queue",
      "Monotonic Queue"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:06.321546"
  },
  "956": {
    "id": 956,
    "title": "Number of Music Playlists",
    "title_slug": "number-of-music-playlists",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 59.97358618889829,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:07.291886"
  },
  "962": {
    "id": 962,
    "title": "Flip String to Monotone Increasing",
    "title_slug": "flip-string-to-monotone-increasing",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 61.63987033362696,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:08.072368"
  },
  "967": {
    "id": 967,
    "title": "Minimum Falling Path Sum",
    "title_slug": "minimum-falling-path-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 61.015523295316044,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:08.667913"
  },
  "972": {
    "id": 972,
    "title": "Knight Dialer",
    "title_slug": "knight-dialer",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 61.360114322006986,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:09.531611"
  },
  "977": {
    "id": 977,
    "title": "Distinct Subsequences II",
    "title_slug": "distinct-subsequences-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 43.65842638610985,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:10.503392"
  },
  "980": {
    "id": 980,
    "title": "Find the Shortest Superstring",
    "title_slug": "find-the-shortest-superstring",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 44.49771074602747,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:11.067922"
  },
  "993": {
    "id": 993,
    "title": "Tallest Billboard",
    "title_slug": "tallest-billboard",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 51.87147281216104,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:11.558489"
  },
  "1000": {
    "id": 1000,
    "title": "Delete Columns to Make Sorted III",
    "title_slug": "delete-columns-to-make-sorted-iii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 59.08105177554893,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:12.279604"
  },
  "1004": {
    "id": 1004,
    "title": "Least Operators to Express Number",
    "title_slug": "least-operators-to-express-number",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 48.43329608013577,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:12.683721"
  },
  "1008": {
    "id": 1008,
    "title": "Binary Tree Cameras",
    "title_slug": "binary-tree-cameras",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 47.381633389797564,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:13.194140"
  },
  "1017": {
    "id": 1017,
    "title": "Odd Even Jump",
    "title_slug": "odd-even-jump",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 40.80137818208859,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Sorting",
      "Monotonic Stack",
      "Ordered Set"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:13.793715"
  },
  "1020": {
    "id": 1020,
    "title": "Longest Turbulent Subarray",
    "title_slug": "longest-turbulent-subarray",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 48.242942236943186,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:14.727251"
  },
  "1025": {
    "id": 1025,
    "title": "Minimum Cost For Tickets",
    "title_slug": "minimum-cost-for-tickets",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 67.42257637494662,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:15.381416"
  },
  "1038": {
    "id": 1038,
    "title": "Number of Squareful Arrays",
    "title_slug": "number-of-squareful-arrays",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 50.62890663620085,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:15.807999"
  },
  "1042": {
    "id": 1042,
    "title": "Minimum Cost to Merge Stones",
    "title_slug": "minimum-cost-to-merge-stones",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 44.69789738478333,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:16.778081"
  },
  "1057": {
    "id": 1057,
    "title": "Numbers With Repeated Digits",
    "title_slug": "numbers-with-repeated-digits",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 44.00408788962698,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:17.557613"
  },
  "1063": {
    "id": 1063,
    "title": "Best Sightseeing Pair",
    "title_slug": "best-sightseeing-pair",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 62.591068965822735,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:17.959780"
  },
  "1081": {
    "id": 1081,
    "title": "Video Stitching",
    "title_slug": "video-stitching",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 52.11860291975528,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:19.460912"
  },
  "1086": {
    "id": 1086,
    "title": "Divisor Game",
    "title_slug": "divisor-game",
    "difficulty": "Easy",
    "status": "NOT_STARTED",
    "ac_rate": 70.68936773665295,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Brainteaser",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:20.008919"
  },
  "1087": {
    "id": 1087,
    "title": "Longest Arithmetic Subsequence",
    "title_slug": "longest-arithmetic-subsequence",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 49.597293575944214,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:21.010406"
  },
  "1096": {
    "id": 1096,
    "title": "Maximum Sum of Two Non-Overlapping Subarrays",
    "title_slug": "maximum-sum-of-two-non-overlapping-subarrays",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 60.40286124754605,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:21.471908"
  },
  "1105": {
    "id": 1105,
    "title": "Uncrossed Lines",
    "title_slug": "uncrossed-lines",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 64.55555829369871,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:21.896411"
  },
  "1111": {
    "id": 1111,
    "title": "Minimum Score Triangulation of Polygon",
    "title_slug": "minimum-score-triangulation-of-polygon",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 60.45017589404971,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:22.757811"
  },
  "1121": {
    "id": 1121,
    "title": "Partition Array for Maximum Sum",
    "title_slug": "partition-array-for-maximum-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 77.15230834690307,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:23.387229"
  },
  "1129": {
    "id": 1129,
    "title": "Longest String Chain",
    "title_slug": "longest-string-chain",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 62.320098172613335,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "String",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:24.321907"
  },
  "1130": {
    "id": 1130,
    "title": "Last Stone Weight II",
    "title_slug": "last-stone-weight-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 58.148549392225654,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:25.132028"
  },
  "1060": {
    "id": 1060,
    "title": "Longest Repeating Substring",
    "title_slug": "longest-repeating-substring",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 63.20986251562323,
    "paid_only": true,
    "tags": [
      "String",
      "Binary Search",
      "Dynamic Programming",
      "Rolling Hash",
      "Suffix Array",
      "Hash Function"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:26.700291"
  },
  "1067": {
    "id": 1067,
    "title": "Campus Bikes II",
    "title_slug": "campus-bikes-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 55.305989918876854,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:27.552247"
  },
  "1068": {
    "id": 1068,
    "title": "Digit Count in Range",
    "title_slug": "digit-count-in-range",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 46.08304356719166,
    "paid_only": true,
    "tags": [
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:28.198564"
  },
  "1170": {
    "id": 1170,
    "title": "Shortest Common Supersequence ",
    "title_slug": "shortest-common-supersequence",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 61.48721956081042,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:28.862948"
  },
  "1196": {
    "id": 1196,
    "title": "Filling Bookcase Shelves",
    "title_slug": "filling-bookcase-shelves",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 68.63550476876013,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:29.521832"
  },
  "1220": {
    "id": 1220,
    "title": "Smallest Sufficient Team",
    "title_slug": "smallest-sufficient-team",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 55.32698068710562,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:30.083941"
  },
  "1228": {
    "id": 1228,
    "title": "Minimum Cost Tree From Leaf Values",
    "title_slug": "minimum-cost-tree-from-leaf-values",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 67.68447686723341,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:30.654551"
  },
  "1236": {
    "id": 1236,
    "title": "N-th Tribonacci Number",
    "title_slug": "n-th-tribonacci-number",
    "difficulty": "Easy",
    "status": "NOT_STARTED",
    "ac_rate": 63.50307558170017,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:31.294604"
  },
  "1239": {
    "id": 1239,
    "title": "Largest 1-Bordered Square",
    "title_slug": "largest-1-bordered-square",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.37170158526497,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:32.044181"
  },
  "1240": {
    "id": 1240,
    "title": "Stone Game II",
    "title_slug": "stone-game-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 72.94737693116153,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Prefix Sum",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:32.485457"
  },
  "1250": {
    "id": 1250,
    "title": "Longest Common Subsequence",
    "title_slug": "longest-common-subsequence",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 58.432384648842984,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:33.032061"
  },
  "1251": {
    "id": 1251,
    "title": "Longest Chunked Palindrome Decomposition",
    "title_slug": "longest-chunked-palindrome-decomposition",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 58.903303083825655,
    "paid_only": false,
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming",
      "Greedy",
      "Rolling Hash",
      "Hash Function"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:34.068811"
  },
  "1263": {
    "id": 1263,
    "title": "Number of Dice Rolls With Target Sum",
    "title_slug": "number-of-dice-rolls-with-target-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 61.7996815511207,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:34.517122"
  },
  "1117": {
    "id": 1117,
    "title": "As Far from Land as Possible",
    "title_slug": "as-far-from-land-as-possible",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.916676420363316,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Breadth-First Search",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:35.443035"
  },
  "1134": {
    "id": 1134,
    "title": "Shortest Distance to Target Color",
    "title_slug": "shortest-distance-to-target-color",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 55.53581131687545,
    "paid_only": true,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:36.756822"
  },
  "1288": {
    "id": 1288,
    "title": "Maximum Subarray Sum with One Deletion",
    "title_slug": "maximum-subarray-sum-with-one-deletion",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 45.42690913101623,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:37.509270"
  },
  "1290": {
    "id": 1290,
    "title": "Make Array Strictly Increasing",
    "title_slug": "make-array-strictly-increasing",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 57.7967283162688,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:38.116872"
  },
  "1299": {
    "id": 1299,
    "title": "K-Concatenation Maximum Sum",
    "title_slug": "k-concatenation-maximum-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 24.393572502581506,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:39.013600"
  },
  "1178": {
    "id": 1178,
    "title": "Valid Palindrome III",
    "title_slug": "valid-palindrome-iii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 49.072766682880065,
    "paid_only": true,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:39.827303"
  },
  "1330": {
    "id": 1330,
    "title": "Longest Arithmetic Subsequence of Given Difference",
    "title_slug": "longest-arithmetic-subsequence-of-given-difference",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 54.39624814437588,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:40.694659"
  },
  "1332": {
    "id": 1332,
    "title": "Count Vowels Permutation",
    "title_slug": "count-vowels-permutation",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 61.443471263656335,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:41.312988"
  },
  "1343": {
    "id": 1343,
    "title": "Dice Roll Simulation",
    "title_slug": "dice-roll-simulation",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 50.2043032259908,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:42.020807"
  },
  "1362": {
    "id": 1362,
    "title": "Airplane Seat Assignment Probability",
    "title_slug": "airplane-seat-assignment-probability",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 66.76550531257722,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Brainteaser",
      "Probability and Statistics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:42.915476"
  },
  "1166": {
    "id": 1166,
    "title": "Toss Strange Coins",
    "title_slug": "toss-strange-coins",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 58.08515046356244,
    "paid_only": true,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Probability and Statistics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:43.760439"
  },
  "1352": {
    "id": 1352,
    "title": "Maximum Profit in Job Scheduling",
    "title_slug": "maximum-profit-in-job-scheduling",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 54.45137985757418,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:44.345891"
  },
  "1202": {
    "id": 1202,
    "title": "Palindrome Removal",
    "title_slug": "palindrome-removal",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 46.321940286560476,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:44.954930"
  },
  "1381": {
    "id": 1381,
    "title": "Maximum Score Words Formed by Letters",
    "title_slug": "maximum-score-words-formed-by-letters",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 81.6089548452562,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:45.554861"
  },
  "1213": {
    "id": 1213,
    "title": "Handshakes That Don't Cross",
    "title_slug": "handshakes-that-dont-cross",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 60.01267140335792,
    "paid_only": true,
    "tags": [
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:46.255765"
  },
  "1388": {
    "id": 1388,
    "title": "Greatest Sum Divisible by Three",
    "title_slug": "greatest-sum-divisible-by-three",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.03894915099089,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:46.905741"
  },
  "1398": {
    "id": 1398,
    "title": "Number of Ways to Stay in the Same Place After Some Steps",
    "title_slug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 49.990939840541195,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:47.476754"
  },
  "1402": {
    "id": 1402,
    "title": "Count Square Submatrices with All Ones",
    "title_slug": "count-square-submatrices-with-all-ones",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 78.8951567571891,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:47.885054"
  },
  "1403": {
    "id": 1403,
    "title": "Palindrome Partitioning III",
    "title_slug": "palindrome-partitioning-iii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 61.76533753310903,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:48.422283"
  },
  "1224": {
    "id": 1224,
    "title": "Minimum Falling Path Sum II",
    "title_slug": "minimum-falling-path-sum-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 63.60018374506592,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:49.043219"
  },
  "1234": {
    "id": 1234,
    "title": "Number of Paths with Max Score",
    "title_slug": "number-of-paths-with-max-score",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 41.30899722937831,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:49.495972"
  },
  "1437": {
    "id": 1437,
    "title": "Minimum Insertion Steps to Make a String Palindrome",
    "title_slug": "minimum-insertion-steps-to-make-a-string-palindrome",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 72.9879460410035,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:50.301470"
  },
  "1443": {
    "id": 1443,
    "title": "Minimum Distance to Type a Word Using Two Fingers",
    "title_slug": "minimum-distance-to-type-a-word-using-two-fingers",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 59.14880295266185,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:51.234128"
  },
  "1451": {
    "id": 1451,
    "title": "Minimum Number of Taps to Open to Water a Garden",
    "title_slug": "minimum-number-of-taps-to-open-to-water-a-garden",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 50.74487895716946,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:52.014334"
  },
  "1456": {
    "id": 1456,
    "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
    "title_slug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 70.98632587859424,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Graph",
      "Shortest Path"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:52.984194"
  },
  "1457": {
    "id": 1457,
    "title": "Minimum Difficulty of a Job Schedule",
    "title_slug": "minimum-difficulty-of-a-job-schedule",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 59.67719305967829,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:53.859575"
  },
  "1466": {
    "id": 1466,
    "title": "Jump Game V",
    "title_slug": "jump-game-v",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 64.24152437515467,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:54.812353"
  },
  "1471": {
    "id": 1471,
    "title": "Maximum Students Taking Exam",
    "title_slug": "maximum-students-taking-exam",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 52.510698640196495,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Matrix",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:55.393764"
  },
  "1461": {
    "id": 1461,
    "title": "Count All Valid Pickup and Delivery Options",
    "title_slug": "count-all-valid-pickup-and-delivery-options",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 64.85820279889546,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:56.315311"
  },
  "1277": {
    "id": 1277,
    "title": "Largest Multiple of Three",
    "title_slug": "largest-multiple-of-three",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 32.8638245976118,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:56.875956"
  },
  "1474": {
    "id": 1474,
    "title": "Longest ZigZag Path in a Binary Tree",
    "title_slug": "longest-zigzag-path-in-a-binary-tree",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 66.7860604272892,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:57.834966"
  },
  "1475": {
    "id": 1475,
    "title": "Maximum Sum BST in Binary Tree",
    "title_slug": "maximum-sum-bst-in-binary-tree",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 44.974192024829634,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:58.748292"
  },
  "1488": {
    "id": 1488,
    "title": "Sort Integers by The Power Value",
    "title_slug": "sort-integers-by-the-power-value",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 70.886035640134,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Memoization",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:21:59.590293"
  },
  "1489": {
    "id": 1489,
    "title": "Pizza With 3n Slices",
    "title_slug": "pizza-with-3n-slices",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 53.28594860579552,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Heap (Priority Queue)"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:00.354887"
  },
  "1511": {
    "id": 1511,
    "title": "Count Number of Teams",
    "title_slug": "count-number-of-teams",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 70.11737912744614,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:01.079461"
  },
  "1513": {
    "id": 1513,
    "title": "Find All Good Strings",
    "title_slug": "find-all-good-strings",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 44.07381874105107,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "String Matching"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:01.808099"
  },
  "1503": {
    "id": 1503,
    "title": "Reducing Dishes",
    "title_slug": "reducing-dishes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 76.4057185960238,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:02.517056"
  },
  "1522": {
    "id": 1522,
    "title": "Stone Game III",
    "title_slug": "stone-game-iii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 63.18047831768317,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:03.354026"
  },
  "1527": {
    "id": 1527,
    "title": "Number of Ways to Paint N \u00d7 3 Grid",
    "title_slug": "number-of-ways-to-paint-n-3-grid",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 65.21926809381445,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:04.379777"
  },
  "1517": {
    "id": 1517,
    "title": "Restore The Array",
    "title_slug": "restore-the-array",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 46.8428049185776,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:04.979129"
  },
  "1535": {
    "id": 1535,
    "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
    "title_slug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 66.45784141975778,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:05.627045"
  },
  "1286": {
    "id": 1286,
    "title": "Constrained Subsequence Sum",
    "title_slug": "constrained-subsequence-sum",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 56.35601172640966,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Sliding Window",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:07.350110"
  },
  "1531": {
    "id": 1531,
    "title": "Number of Ways to Wear Different Hats to Each Other",
    "title_slug": "number-of-ways-to-wear-different-hats-to-each-other",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 44.69283193967809,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:07.763859"
  },
  "1555": {
    "id": 1555,
    "title": "Number of Ways of Cutting a Pizza",
    "title_slug": "number-of-ways-of-cutting-a-pizza",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 61.551781830349675,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Memoization",
      "Matrix",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:08.627123"
  },
  "1545": {
    "id": 1545,
    "title": "Form Largest Integer With Digits That Add up to Target",
    "title_slug": "form-largest-integer-with-digits-that-add-up-to-target",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 48.91049354867816,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:09.225207"
  },
  "1569": {
    "id": 1569,
    "title": "Max Dot Product of Two Subsequences",
    "title_slug": "max-dot-product-of-two-subsequences",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 62.36282194848825,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:10.115221"
  },
  "1559": {
    "id": 1559,
    "title": "Cherry Pickup II",
    "title_slug": "cherry-pickup-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 72.08945285681264,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:10.887296"
  },
  "1577": {
    "id": 1577,
    "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
    "title_slug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 60.33005577597608,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Combinatorics",
      "Probability and Statistics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:11.480352"
  },
  "1583": {
    "id": 1583,
    "title": "Paint House III",
    "title_slug": "paint-house-iii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 61.033167789996455,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:12.047925"
  },
  "1573": {
    "id": 1573,
    "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
    "title_slug": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 36.55582440373315,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:12.511656"
  },
  "1571": {
    "id": 1571,
    "title": "Allocate Mailboxes",
    "title_slug": "allocate-mailboxes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 55.842228539755766,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:13.413725"
  },
  "1296": {
    "id": 1296,
    "title": "Kth Ancestor of a Tree Node",
    "title_slug": "kth-ancestor-of-a-tree-node",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 36.29153369626432,
    "paid_only": false,
    "tags": [
      "Binary Search",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Design"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:14.099205"
  },
  "1586": {
    "id": 1586,
    "title": "Longest Subarray of 1's After Deleting One Element",
    "title_slug": "longest-subarray-of-1s-after-deleting-one-element",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 69.42932206189099,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:14.823568"
  },
  "1587": {
    "id": 1587,
    "title": "Parallel Courses II",
    "title_slug": "parallel-courses-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 29.585374902452443,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Graph",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:15.286839"
  },
  "1628": {
    "id": 1628,
    "title": "Count Submatrices With All Ones",
    "title_slug": "count-submatrices-with-all-ones",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 57.41560307988084,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Matrix",
      "Monotonic Stack"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:16.029008"
  },
  "1617": {
    "id": 1617,
    "title": "Stone Game IV",
    "title_slug": "stone-game-iv",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 59.49610247053675,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:16.669852"
  },
  "1631": {
    "id": 1631,
    "title": "Number of Sub-arrays With Odd Sum",
    "title_slug": "number-of-sub-arrays-with-odd-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 55.93201758028563,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:17.157177"
  },
  "1632": {
    "id": 1632,
    "title": "Number of Good Ways to Split a String",
    "title_slug": "number-of-good-ways-to-split-a-string",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 68.40293447194547,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:18.101122"
  },
  "1633": {
    "id": 1633,
    "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
    "title_slug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 72.6484090193078,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:18.948855"
  },
  "1637": {
    "id": 1637,
    "title": "String Compression II",
    "title_slug": "string-compression-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 51.985534109682874,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:19.723554"
  },
  "1659": {
    "id": 1659,
    "title": "Get the Maximum Score",
    "title_slug": "get-the-maximum-score",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 40.21929068937511,
    "paid_only": false,
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:20.654067"
  },
  "1669": {
    "id": 1669,
    "title": "Minimum Cost to Cut a Stick",
    "title_slug": "minimum-cost-to-cut-a-stick",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 62.311523526279565,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:21.173404"
  },
  "1687": {
    "id": 1687,
    "title": "The Most Similar Path in a Graph",
    "title_slug": "the-most-similar-path-in-a-graph",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 59.29960569404531,
    "paid_only": true,
    "tags": [
      "Dynamic Programming",
      "Graph"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:21.587034"
  },
  "1676": {
    "id": 1676,
    "title": "Minimum Number of Days to Eat N Oranges",
    "title_slug": "minimum-number-of-days-to-eat-n-oranges",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 35.75441550408907,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:22.504360"
  },
  "1685": {
    "id": 1685,
    "title": "Stone Game V",
    "title_slug": "stone-game-v",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 41.35951764545578,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:23.015706"
  },
  "1690": {
    "id": 1690,
    "title": "Maximum Length of Subarray With Positive Product",
    "title_slug": "maximum-length-of-subarray-with-positive-product",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 44.49451328910585,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:23.458484"
  },
  "1692": {
    "id": 1692,
    "title": "Number of Ways to Reorder Array to Get Same BST",
    "title_slug": "number-of-ways-to-reorder-array-to-get-same-bst",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 53.668117634568425,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Divide and Conquer",
      "Dynamic Programming",
      "Tree",
      "Union Find",
      "Binary Search Tree",
      "Memoization",
      "Combinatorics",
      "Binary Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:24.114278"
  },
  "1680": {
    "id": 1680,
    "title": "Count All Possible Routes",
    "title_slug": "count-all-possible-routes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 64.92873987491028,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:24.927237"
  },
  "1700": {
    "id": 1700,
    "title": "Minimum Time to Make Rope Colorful",
    "title_slug": "minimum-time-to-make-rope-colorful",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 63.39218424310458,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:25.739556"
  },
  "1716": {
    "id": 1716,
    "title": "Maximum Non Negative Product in a Matrix",
    "title_slug": "maximum-non-negative-product-in-a-matrix",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 35.04863247152714,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:26.491085"
  },
  "1717": {
    "id": 1717,
    "title": "Minimum Cost to Connect Two Groups of Points",
    "title_slug": "minimum-cost-to-connect-two-groups-of-points",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 48.69703249702368,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Matrix",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:27.112262"
  },
  "1732": {
    "id": 1732,
    "title": "Minimum One Bit Operations to Make Integers Zero",
    "title_slug": "minimum-one-bit-operations-to-make-integers-zero",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 73.2504852584791,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:27.595546"
  },
  "1740": {
    "id": 1740,
    "title": "Count Subtrees With Max Distance Between Cities",
    "title_slug": "count-subtrees-with-max-distance-between-cities",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 66.73058013765979,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Tree",
      "Enumeration",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:28.080330"
  },
  "1725": {
    "id": 1725,
    "title": "Number of Sets of K Non-Overlapping Line Segments",
    "title_slug": "number-of-sets-of-k-non-overlapping-line-segments",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 44.839186691312385,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:28.601606"
  },
  "1748": {
    "id": 1748,
    "title": "Best Team With No Conflicts",
    "title_slug": "best-team-with-no-conflicts",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 50.47204968944099,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:29.130744"
  },
  "1743": {
    "id": 1743,
    "title": "Count Substrings That Differ by One Character",
    "title_slug": "count-substrings-that-differ-by-one-character",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 71.90907262120298,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Enumeration"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:30.053127"
  },
  "1744": {
    "id": 1744,
    "title": "Number of Ways to Form a Target String Given a Dictionary",
    "title_slug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 56.896235318791945,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:30.592651"
  },
  "1761": {
    "id": 1761,
    "title": "Count Sorted Vowel Strings",
    "title_slug": "count-sorted-vowel-strings",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 78.98176610449774,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:31.468798"
  },
  "489": {
    "id": 489,
    "title": "Kth Smallest Instructions",
    "title_slug": "kth-smallest-instructions",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 44.01068258581415,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:32.192969"
  },
  "1756": {
    "id": 1756,
    "title": "Minimum Deletions to Make String Balanced",
    "title_slug": "minimum-deletions-to-make-string-balanced",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 65.61581428217022,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Stack"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:33.281697"
  },
  "1757": {
    "id": 1757,
    "title": "Minimum Jumps to Reach Home",
    "title_slug": "minimum-jumps-to-reach-home",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 30.272596843615496,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Breadth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:33.914074"
  },
  "1758": {
    "id": 1758,
    "title": "Distribute Repeating Integers",
    "title_slug": "distribute-repeating-integers",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 39.90152857319435,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:34.578183"
  },
  "1778": {
    "id": 1778,
    "title": "Maximize Grid Happiness",
    "title_slug": "maximize-grid-happiness",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 39.98367061293521,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:35.437647"
  },
  "1764": {
    "id": 1764,
    "title": "Maximum Repeating Substring",
    "title_slug": "maximum-repeating-substring",
    "difficulty": "Easy",
    "status": "NOT_STARTED",
    "ac_rate": 39.97803682278289,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "String Matching"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:36.217365"
  },
  "1766": {
    "id": 1766,
    "title": "Minimum Number of Removals to Make Mountain Array",
    "title_slug": "minimum-number-of-removals-to-make-mountain-array",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 54.87908457079923,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:36.660688"
  },
  "1799": {
    "id": 1799,
    "title": "Minimum Incompatibility",
    "title_slug": "minimum-incompatibility",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 40.17053529133112,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:37.105125"
  },
  "1822": {
    "id": 1822,
    "title": "Longest Palindromic Subsequence II",
    "title_slug": "longest-palindromic-subsequence-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 50.219941348973606,
    "paid_only": true,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:37.763107"
  },
  "1789": {
    "id": 1789,
    "title": "Delivering Boxes from Storage to Ports",
    "title_slug": "delivering-boxes-from-storage-to-ports",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 39.53578149881774,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Segment Tree",
      "Queue",
      "Heap (Priority Queue)",
      "Prefix Sum",
      "Monotonic Queue"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:38.147836"
  },
  "1808": {
    "id": 1808,
    "title": "Stone Game VII",
    "title_slug": "stone-game-vii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 58.48361064062967,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:38.619091"
  },
  "1367": {
    "id": 1367,
    "title": "Maximum Height by Stacking Cuboids ",
    "title_slug": "maximum-height-by-stacking-cuboids",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 60.65600940169652,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:39.267876"
  },
  "1828": {
    "id": 1828,
    "title": "Count Ways to Distribute Candies",
    "title_slug": "count-ways-to-distribute-candies",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 63.45338983050848,
    "paid_only": true,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:39.927348"
  },
  "1814": {
    "id": 1814,
    "title": "Jump Game VI",
    "title_slug": "jump-game-vi",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 46.110875163091094,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:40.629212"
  },
  "1809": {
    "id": 1809,
    "title": "Sum Of Special Evenly-Spaced Elements In Array",
    "title_slug": "sum-of-special-evenly-spaced-elements-in-array",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 49.24379915305505,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:41.601055"
  },
  "1825": {
    "id": 1825,
    "title": "Find Minimum Time to Finish All Jobs",
    "title_slug": "find-minimum-time-to-finish-all-jobs",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 44.14442474483684,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:42.035035"
  },
  "1727": {
    "id": 1727,
    "title": "Cat and Mouse II",
    "title_slug": "cat-and-mouse-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 39.60644173202766,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Matrix",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:42.986732"
  },
  "1836": {
    "id": 1836,
    "title": "Count Ways to Make Array With Product",
    "title_slug": "count-ways-to-make-array-with-product",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 53.42306199042319,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Combinatorics",
      "Number Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:43.621825"
  },
  "1871": {
    "id": 1871,
    "title": "Palindrome Partitioning IV",
    "title_slug": "palindrome-partitioning-iv",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 44.85139419800279,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:44.134530"
  },
  "1893": {
    "id": 1893,
    "title": "Maximum Subarray Sum After One Operation",
    "title_slug": "maximum-subarray-sum-after-one-operation",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 65.27018528373083,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:44.801436"
  },
  "1849": {
    "id": 1849,
    "title": "Maximum Absolute Sum of Any Subarray",
    "title_slug": "maximum-absolute-sum-of-any-subarray",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 71.40678471986557,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:45.447024"
  },
  "1851": {
    "id": 1851,
    "title": "Maximum Number of Events That Can Be Attended II",
    "title_slug": "maximum-number-of-events-that-can-be-attended-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 63.77494108246021,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:46.231300"
  },
  "1881": {
    "id": 1881,
    "title": "Closest Subsequence Sum",
    "title_slug": "closest-subsequence-sum",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 42.171638966312244,
    "paid_only": false,
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Bit Manipulation",
      "Sorting",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:47.146885"
  },
  "1896": {
    "id": 1896,
    "title": "Maximum Score from Performing Multiplication Operations",
    "title_slug": "maximum-score-from-performing-multiplication-operations",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 42.506281407035175,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:47.939086"
  },
  "1897": {
    "id": 1897,
    "title": "Maximize Palindrome Length From Subsequences",
    "title_slug": "maximize-palindrome-length-from-subsequences",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 37.51188412281192,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:48.924091"
  },
  "1900": {
    "id": 1900,
    "title": "Closest Dessert Cost",
    "title_slug": "closest-dessert-cost",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 47.82904659574752,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:49.673651"
  },
  "1912": {
    "id": 1912,
    "title": "Number of Restricted Paths From First to Last Node",
    "title_slug": "number-of-restricted-paths-from-first-to-last-node",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 40.244299886584365,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Graph",
      "Topological Sort",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:50.144012"
  },
  "1913": {
    "id": 1913,
    "title": "Make the XOR of All Segments Equal to Zero",
    "title_slug": "make-the-xor-of-all-segments-equal-to-zero",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 40.10735712030313,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:50.735029"
  },
  "1906": {
    "id": 1906,
    "title": "Maximize Score After N Operations",
    "title_slug": "maximize-score-after-n-operations",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 57.8852598840365,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Number Theory",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:51.299838"
  },
  "1924": {
    "id": 1924,
    "title": "Maximum Number of Groups Getting Fresh Donuts",
    "title_slug": "maximum-number-of-groups-getting-fresh-donuts",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 40.75272746254633,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:51.758573"
  },
  "1952": {
    "id": 1952,
    "title": "Minimum Sideway Jumps",
    "title_slug": "minimum-sideway-jumps",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.0516432810893,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:52.712240"
  },
  "1986": {
    "id": 1986,
    "title": "Largest Color Value in a Directed Graph",
    "title_slug": "largest-color-value-in-a-directed-graph",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 57.53350967877626,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "Dynamic Programming",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Counting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:53.621435"
  },
  "1996": {
    "id": 1996,
    "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
    "title_slug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 58.100687251323535,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:54.555614"
  },
  "2001": {
    "id": 2001,
    "title": "Jump Game VII",
    "title_slug": "jump-game-vii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 25.78983813728036,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Sliding Window",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:55.451095"
  },
  "2002": {
    "id": 2002,
    "title": "Stone Game VIII",
    "title_slug": "stone-game-viii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 53.185345605486376,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Prefix Sum",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:56.211380"
  },
  "1989": {
    "id": 1989,
    "title": "Minimum XOR Sum of Two Arrays",
    "title_slug": "minimum-xor-sum-of-two-arrays",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 49.479705802233724,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:56.890301"
  },
  "2013": {
    "id": 2013,
    "title": "Minimum Skips to Arrive at Meeting On Time",
    "title_slug": "minimum-skips-to-arrive-at-meeting-on-time",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 38.361230973493285,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:57.286178"
  },
  "2031": {
    "id": 2031,
    "title": "Egg Drop With 2 Eggs and N Floors",
    "title_slug": "egg-drop-with-2-eggs-and-n-floors",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 74.03313529197493,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:58.259319"
  },
  "2017": {
    "id": 2017,
    "title": "Minimum Number of Flips to Make the Binary String Alternating",
    "title_slug": "minimum-number-of-flips-to-make-the-binary-string-alternating",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 40.68301600113955,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:59.379095"
  },
  "2008": {
    "id": 2008,
    "title": "Minimum Cost to Change the Final Value of Expression",
    "title_slug": "minimum-cost-to-change-the-final-value-of-expression",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 50.86951994168489,
    "paid_only": false,
    "tags": [
      "Math",
      "String",
      "Dynamic Programming",
      "Stack"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:22:59.844854"
  },
  "2028": {
    "id": 2028,
    "title": "The Earliest and Latest Rounds Where Players Compete",
    "title_slug": "the-earliest-and-latest-rounds-where-players-compete",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 73.31546152731488,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:00.497215"
  },
  "2062": {
    "id": 2062,
    "title": "Game of Nim",
    "title_slug": "game-of-nim",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 62.61034047919294,
    "paid_only": true,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Brainteaser",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:01.151335"
  },
  "2022": {
    "id": 2022,
    "title": "Maximum Alternating Subsequence Sum",
    "title_slug": "maximum-alternating-subsequence-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 58.69266449063735,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:01.747723"
  },
  "1313": {
    "id": 1313,
    "title": "Count Ways to Build Rooms in an Ant Colony",
    "title_slug": "count-ways-to-build-rooms-in-an-ant-colony",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 48.9399019860717,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Tree",
      "Graph",
      "Topological Sort",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:02.587552"
  },
  "2040": {
    "id": 2040,
    "title": "Minimum Cost to Reach Destination in Time",
    "title_slug": "minimum-cost-to-reach-destination-in-time",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 40.286708269597824,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Graph"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:03.402352"
  },
  "2061": {
    "id": 2061,
    "title": "Painting a Grid With Three Different Colors",
    "title_slug": "painting-a-grid-with-three-different-colors",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 78.18063131341071,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:04.312862"
  },
  "2067": {
    "id": 2067,
    "title": "Maximum Number of Points with Cost",
    "title_slug": "maximum-number-of-points-with-cost",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 42.02998279675596,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:05.253009"
  },
  "2078": {
    "id": 2078,
    "title": "Maximum Compatibility Score Sum",
    "title_slug": "maximum-compatibility-score-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 63.63212235542303,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:05.724861"
  },
  "2086": {
    "id": 2086,
    "title": "Count Number of Special Subsequences",
    "title_slug": "count-number-of-special-subsequences",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 52.10576430088625,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:06.392606"
  },
  "2081": {
    "id": 2081,
    "title": "Minimum Total Space Wasted With K Resizing Operations",
    "title_slug": "minimum-total-space-wasted-with-k-resizing-operations",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 43.20987654320987,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:07.174476"
  },
  "2090": {
    "id": 2090,
    "title": "Number of Ways to Arrive at Destination",
    "title_slug": "number-of-ways-to-arrive-at-destination",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 37.245027052694695,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Graph",
      "Topological Sort",
      "Shortest Path"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:08.068994"
  },
  "2091": {
    "id": 2091,
    "title": "Number of Ways to Separate Numbers",
    "title_slug": "number-of-ways-to-separate-numbers",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 21.061629894976797,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Suffix Array"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:08.733876"
  },
  "2108": {
    "id": 2108,
    "title": "Minimize the Difference Between Target and Chosen Elements",
    "title_slug": "minimize-the-difference-between-target-and-chosen-elements",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 36.051877299615796,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:09.516873"
  },
  "2114": {
    "id": 2114,
    "title": "Minimum Number of Work Sessions to Finish the Tasks",
    "title_slug": "minimum-number-of-work-sessions-to-finish-the-tasks",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 33.94921397473567,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:10.255065"
  },
  "2115": {
    "id": 2115,
    "title": "Number of Unique Good Subsequences",
    "title_slug": "number-of-unique-good-subsequences",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 52.31303526873019,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:10.961796"
  },
  "2105": {
    "id": 2105,
    "title": "The Number of Good Subsets",
    "title_slug": "the-number-of-good-subsets",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 36.0487125459805,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Counting",
      "Number Theory",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:11.495777"
  },
  "2124": {
    "id": 2124,
    "title": "First Day Where You Have Been in All the Rooms",
    "title_slug": "first-day-where-you-have-been-in-all-the-rooms",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 39.890636052015886,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:12.286093"
  },
  "2130": {
    "id": 2130,
    "title": "Maximum Product of the Length of Two Palindromic Subsequences",
    "title_slug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 61.6618709850107,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:12.859124"
  },
  "2131": {
    "id": 2131,
    "title": "Smallest Missing Genetic Value in Each Subtree",
    "title_slug": "smallest-missing-genetic-value-in-each-subtree",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 46.914208991157,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Union Find"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:13.501089"
  },
  "2153": {
    "id": 2153,
    "title": "Subtree Removal Game with Fibonacci Tree",
    "title_slug": "subtree-removal-game-with-fibonacci-tree",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 57.152875175315565,
    "paid_only": true,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Tree",
      "Binary Tree",
      "Game Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:14.032368"
  },
  "2118": {
    "id": 2118,
    "title": "Maximum Earnings From Taxi",
    "title_slug": "maximum-earnings-from-taxi",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 45.35670520539187,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:14.952942"
  },
  "2147": {
    "id": 2147,
    "title": "The Score of Students Solving Math Expression",
    "title_slug": "the-score-of-students-solving-math-expression",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 33.488190513371066,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "String",
      "Dynamic Programming",
      "Stack",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:15.607887"
  },
  "2162": {
    "id": 2162,
    "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
    "title_slug": "partition-array-into-two-arrays-to-minimize-sum-difference",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 22.192767935482667,
    "paid_only": false,
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Dynamic Programming",
      "Bit Manipulation",
      "Ordered Set",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:16.244827"
  },
  "512": {
    "id": 512,
    "title": "Maximum Alternating Subarray Sum",
    "title_slug": "maximum-alternating-subarray-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 39.823950473979494,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:16.748479"
  },
  "2176": {
    "id": 2176,
    "title": "Parallel Courses III",
    "title_slug": "parallel-courses-iii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 66.7907729123079,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Graph",
      "Topological Sort"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:17.196058"
  },
  "2082": {
    "id": 2082,
    "title": "Minimum Cost to Separate Sentence Into Rows",
    "title_slug": "minimum-cost-to-separate-sentence-into-rows",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 50.71100415663968,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:18.151340"
  },
  "2164": {
    "id": 2164,
    "title": "Two Best Non-Overlapping Events",
    "title_slug": "two-best-non-overlapping-events",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 60.83660027785434,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:19.135550"
  },
  "2184": {
    "id": 2184,
    "title": "Check if an Original String Exists Given Two Encoded Strings",
    "title_slug": "check-if-an-original-string-exists-given-two-encoded-strings",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 43.30992297236067,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:19.667924"
  },
  "2187": {
    "id": 2187,
    "title": "Vowels of All Substrings",
    "title_slug": "vowels-of-all-substrings",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 54.80126825954026,
    "paid_only": false,
    "tags": [
      "Math",
      "String",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:20.424860"
  },
  "2191": {
    "id": 2191,
    "title": "Minimum Number of Food Buckets to Feed the Hamsters",
    "title_slug": "minimum-number-of-food-buckets-to-feed-the-hamsters",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 47.22256874521056,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:20.917834"
  },
  "2193": {
    "id": 2193,
    "title": "Count Fertile Pyramids in a Land",
    "title_slug": "count-fertile-pyramids-in-a-land",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 65.69828106980064,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:21.491590"
  },
  "2205": {
    "id": 2205,
    "title": "Find Good Days to Rob the Bank",
    "title_slug": "find-good-days-to-rob-the-bank",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 50.662087983558365,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:22.510623"
  },
  "2233": {
    "id": 2233,
    "title": "Number of Smooth Descent Periods of a Stock",
    "title_slug": "number-of-smooth-descent-periods-of-a-stock",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 59.45819084020653,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:23.291639"
  },
  "2262": {
    "id": 2262,
    "title": "Solving Questions With Brainpower",
    "title_slug": "solving-questions-with-brainpower",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 60.285224231491476,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:24.355280"
  },
  "2282": {
    "id": 2282,
    "title": "Choose Numbers From Two Arrays in Range",
    "title_slug": "choose-numbers-from-two-arrays-in-range",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 52.24969598702878,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:25.144029"
  },
  "2251": {
    "id": 2251,
    "title": "Number of Ways to Divide a Long Corridor",
    "title_slug": "number-of-ways-to-divide-a-long-corridor",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 48.760542473517305,
    "paid_only": false,
    "tags": [
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:25.891058"
  },
  "2287": {
    "id": 2287,
    "title": "Minimum Number of Lines to Cover Points",
    "title_slug": "minimum-number-of-lines-to-cover-points",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 43.04917474902161,
    "paid_only": true,
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Geometry",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:26.306242"
  },
  "2267": {
    "id": 2267,
    "title": "Minimum Difference in Sums After Removal of Elements",
    "title_slug": "minimum-difference-in-sums-after-removal-of-elements",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 69.98313063600152,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Heap (Priority Queue)"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:27.119240"
  },
  "2286": {
    "id": 2286,
    "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
    "title_slug": "minimum-time-to-remove-all-cars-containing-illegal-goods",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 41.44662961789859,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:28.053403"
  },
  "2291": {
    "id": 2291,
    "title": "Maximum AND Sum of Array",
    "title_slug": "maximum-and-sum-of-array",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 50.11250988262482,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:28.779680"
  },
  "2322": {
    "id": 2322,
    "title": "Number of Ways to Build Sturdy Brick Wall",
    "title_slug": "number-of-ways-to-build-sturdy-brick-wall",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 49.36144334076627,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:29.440660"
  },
  "2295": {
    "id": 2295,
    "title": "Minimum Time to Finish the Race",
    "title_slug": "minimum-time-to-finish-the-race",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 42.59058625255808,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:30.020092"
  },
  "1385": {
    "id": 1385,
    "title": "Number of Ways to Build House of Cards",
    "title_slug": "number-of-ways-to-build-house-of-cards",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 62.41908636952099,
    "paid_only": true,
    "tags": [
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:30.861919"
  },
  "2311": {
    "id": 2311,
    "title": "Minimum White Tiles After Covering With Carpets",
    "title_slug": "minimum-white-tiles-after-covering-with-carpets",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 37.5948482428115,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:31.484985"
  },
  "1393": {
    "id": 1393,
    "title": "Maximum Value of K Coins From Piles",
    "title_slug": "maximum-value-of-k-coins-from-piles",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 60.382314429311826,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:32.294577"
  },
  "2325": {
    "id": 2325,
    "title": "Number of Ways to Select Buildings",
    "title_slug": "number-of-ways-to-select-buildings",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 50.5098226523238,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:33.225212"
  },
  "2007": {
    "id": 2007,
    "title": "Maximum Cost of Trip With K Highways",
    "title_slug": "maximum-cost-of-trip-with-k-highways",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 50.44899838821092,
    "paid_only": true,
    "tags": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Graph",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:34.167310"
  },
  "2340": {
    "id": 2340,
    "title": "Total Appeal of A String",
    "title_slug": "total-appeal-of-a-string",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 55.908019619084016,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:34.695641"
  },
  "1419": {
    "id": 1419,
    "title": "Make Array Non-decreasing or Non-increasing",
    "title_slug": "make-array-non-decreasing-or-non-increasing",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 65.34880389628994,
    "paid_only": true,
    "tags": [
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:35.101082"
  },
  "2348": {
    "id": 2348,
    "title": "Count Number of Texts",
    "title_slug": "count-number-of-texts",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 49.08746588440616,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:36.028770"
  },
  "2349": {
    "id": 2349,
    "title": " Check if There Is a Valid Parentheses String Path",
    "title_slug": "check-if-there-is-a-valid-parentheses-string-path",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 39.5994422613766,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:36.536088"
  },
  "2360": {
    "id": 2360,
    "title": "Substring With Largest Variance",
    "title_slug": "substring-with-largest-variance",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 45.936661365669416,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:37.280489"
  },
  "2426": {
    "id": 2426,
    "title": "Maximum Profit From Trading Stocks",
    "title_slug": "maximum-profit-from-trading-stocks",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 46.75884773662551,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:38.488102"
  },
  "2056": {
    "id": 2056,
    "title": "Jump Game VIII",
    "title_slug": "jump-game-viii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 44.99545867393279,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Graph",
      "Monotonic Stack",
      "Shortest Path"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:39.091506"
  },
  "1394": {
    "id": 1394,
    "title": "Minimum Path Cost in a Grid",
    "title_slug": "minimum-path-cost-in-a-grid",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 67.45637037706845,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:40.046887"
  },
  "1418": {
    "id": 1418,
    "title": "Fair Distribution of Cookies",
    "title_slug": "fair-distribution-of-cookies",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 69.5220195000711,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:40.541086"
  },
  "1334": {
    "id": 1334,
    "title": "Sum of Numbers With Units Digit K",
    "title_slug": "sum-of-numbers-with-units-digit-k",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 27.522760204500095,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Greedy",
      "Enumeration"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:41.274692"
  },
  "2395": {
    "id": 2395,
    "title": "Longest Binary Subsequence Less Than or Equal to K",
    "title_slug": "longest-binary-subsequence-less-than-or-equal-to-k",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 52.91470367628675,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Greedy",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:41.950935"
  },
  "1376": {
    "id": 1376,
    "title": "Selling Pieces of Wood",
    "title_slug": "selling-pieces-of-wood",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 51.82890855457227,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:42.937834"
  },
  "2399": {
    "id": 2399,
    "title": "Minimum Flips in Binary Tree to Get Result",
    "title_slug": "minimum-flips-in-binary-tree-to-get-result",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 56.62490966032281,
    "paid_only": true,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:43.624197"
  },
  "2404": {
    "id": 2404,
    "title": "Number of Distinct Roll Sequences",
    "title_slug": "number-of-distinct-roll-sequences",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 57.65646393710525,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:44.607425"
  },
  "2397": {
    "id": 2397,
    "title": "Count Number of Ways to Place Houses",
    "title_slug": "count-number-of-ways-to-place-houses",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 43.07615703129095,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:45.403847"
  },
  "1348": {
    "id": 1348,
    "title": "Maximum Score Of Spliced Array",
    "title_slug": "maximum-score-of-spliced-array",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 57.71549827911912,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:46.807946"
  },
  "2408": {
    "id": 2408,
    "title": "Number of People Aware of a Secret",
    "title_slug": "number-of-people-aware-of-a-secret",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 46.46015576274168,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Queue",
      "Simulation"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:47.718058"
  },
  "2409": {
    "id": 2409,
    "title": "Number of Increasing Paths in a Grid",
    "title_slug": "number-of-increasing-paths-in-a-grid",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 57.57373746352014,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Topological Sort",
      "Memoization",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:48.250165"
  },
  "2415": {
    "id": 2415,
    "title": "Count the Number of Ideal Arrays",
    "title_slug": "count-the-number-of-ideal-arrays",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 57.02272592817964,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics",
      "Number Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:48.738354"
  },
  "2490": {
    "id": 2490,
    "title": "Maximum Number of Books You Can Take",
    "title_slug": "maximum-number-of-books-you-can-take",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 39.381245885943386,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Monotonic Stack"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:49.685680"
  },
  "2500": {
    "id": 2500,
    "title": "Minimum Costs Using the Train Line",
    "title_slug": "minimum-costs-using-the-train-line",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 77.64350453172206,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:50.177806"
  },
  "2443": {
    "id": 2443,
    "title": "Check if There is a Valid Partition For The Array",
    "title_slug": "check-if-there-is-a-valid-partition-for-the-array",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 52.04179909467399,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:51.183927"
  },
  "2444": {
    "id": 2444,
    "title": "Longest Ideal Subsequence",
    "title_slug": "longest-ideal-subsequence",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 46.7591396771669,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:51.714409"
  },
  "2457": {
    "id": 2457,
    "title": "Count Special Integers",
    "title_slug": "count-special-integers",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 40.34439690680556,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:52.551097"
  },
  "2517": {
    "id": 2517,
    "title": "Choose Edges to Maximize Score in a Tree",
    "title_slug": "choose-edges-to-maximize-score-in-a-tree",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 56.2229280970257,
    "paid_only": true,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:53.123310"
  },
  "2464": {
    "id": 2464,
    "title": "Time Needed to Rearrange a Binary String",
    "title_slug": "time-needed-to-rearrange-a-binary-string",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.78050662377235,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Simulation"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:53.857993"
  },
  "2535": {
    "id": 2535,
    "title": "Count Strictly Increasing Subarrays",
    "title_slug": "count-strictly-increasing-subarrays",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 71.28987517337032,
    "paid_only": true,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:54.655295"
  },
  "2477": {
    "id": 2477,
    "title": "Number of Ways to Reach a Position After Exactly k Steps",
    "title_slug": "number-of-ways-to-reach-a-position-after-exactly-k-steps",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 36.291033758409874,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:55.375306"
  },
  "2537": {
    "id": 2537,
    "title": "Minimum Time to Kill All Monsters",
    "title_slug": "minimum-time-to-kill-all-monsters",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 56.336178594878525,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:56.051240"
  },
  "2526": {
    "id": 2526,
    "title": "Longest Increasing Subsequence II",
    "title_slug": "longest-increasing-subsequence-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 25.56020566782255,
    "paid_only": false,
    "tags": [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Segment Tree",
      "Queue",
      "Monotonic Queue"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:56.712773"
  },
  "2504": {
    "id": 2504,
    "title": "Find All Good Indices",
    "title_slug": "find-all-good-indices",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 40.12047538937429,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:57.115570"
  },
  "2510": {
    "id": 2510,
    "title": "Maximum Deletions on a String",
    "title_slug": "maximum-deletions-on-a-string",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 34.85607008760952,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:57.682424"
  },
  "2570": {
    "id": 2570,
    "title": "Maximize Total Tastiness of Purchased Fruits",
    "title_slug": "maximize-total-tastiness-of-purchased-fruits",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 64.61183158642743,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:58.385174"
  },
  "2521": {
    "id": 2521,
    "title": "Paths in Matrix Whose Sum Is Divisible by K",
    "title_slug": "paths-in-matrix-whose-sum-is-divisible-by-k",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 44.418388634252565,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:23:59.286203"
  },
  "2579": {
    "id": 2579,
    "title": "Minimum Split Into Subarrays With GCD Greater Than One",
    "title_slug": "minimum-split-into-subarrays-with-gcd-greater-than-one",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 69.824016563147,
    "paid_only": true,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Greedy",
      "Number Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:00.077326"
  },
  "2530": {
    "id": 2530,
    "title": "Minimize Maximum of Array",
    "title_slug": "minimize-maximum-of-array",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 46.40167177541955,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:00.519768"
  },
  "2554": {
    "id": 2554,
    "title": "Minimum Total Distance Traveled",
    "title_slug": "minimum-total-distance-traveled",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 58.95602176340612,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:01.651727"
  },
  "2607": {
    "id": 2607,
    "title": "Minimum Subarrays in a Valid Split",
    "title_slug": "minimum-subarrays-in-a-valid-split",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 54.61337317893163,
    "paid_only": true,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Number Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:02.375725"
  },
  "2562": {
    "id": 2562,
    "title": "Count Ways To Build Good Strings",
    "title_slug": "count-ways-to-build-good-strings",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 59.15219608364799,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:02.898735"
  },
  "2559": {
    "id": 2559,
    "title": "Maximum Number of Non-overlapping Palindrome Substrings",
    "title_slug": "maximum-number-of-non-overlapping-palindrome-substrings",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 41.94524554206101,
    "paid_only": false,
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:03.880994"
  },
  "2569": {
    "id": 2569,
    "title": "Number of Beautiful Partitions",
    "title_slug": "number-of-beautiful-partitions",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 32.18567556296914,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:04.333581"
  },
  "2577": {
    "id": 2577,
    "title": "Count Palindromic Subsequences",
    "title_slug": "count-palindromic-subsequences",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 39.715394566623544,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:04.831401"
  },
  "2638": {
    "id": 2638,
    "title": "Number of Subarrays Having Even Product",
    "title_slug": "number-of-subarrays-having-even-product",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 61.77654755913438,
    "paid_only": true,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:05.550762"
  },
  "2586": {
    "id": 2586,
    "title": "Longest Square Streak in an Array",
    "title_slug": "longest-square-streak-in-an-array",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 53.07294319863325,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:06.234391"
  },
  "2653": {
    "id": 2653,
    "title": "Check if There is a Path With Equal Number of 0's And 1's",
    "title_slug": "check-if-there-is-a-path-with-equal-number-of-0s-and-1s",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.36902623068631,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:07.133335"
  },
  "2601": {
    "id": 2601,
    "title": "Number of Great Partitions",
    "title_slug": "number-of-great-partitions",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 32.38458211698562,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:07.852397"
  },
  "2511": {
    "id": 2511,
    "title": "Partition String Into Substrings With Values at Most K",
    "title_slug": "partition-string-into-substrings-with-values-at-most-k",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 46.75339281697533,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:08.589110"
  },
  "2672": {
    "id": 2672,
    "title": "Number of Good Binary Strings",
    "title_slug": "number-of-good-binary-strings",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 52.30824630896651,
    "paid_only": true,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:09.091243"
  },
  "2627": {
    "id": 2627,
    "title": "Difference Between Maximum and Minimum Price Sum",
    "title_slug": "difference-between-maximum-and-minimum-price-sum",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 32.2301918265221,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:09.740069"
  },
  "2633": {
    "id": 2633,
    "title": "Minimum Cost to Split an Array",
    "title_slug": "minimum-cost-to-split-an-array",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 42.80395611891093,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming",
      "Counting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:10.233204"
  },
  "2682": {
    "id": 2682,
    "title": "Count Increasing Quadruplets",
    "title_slug": "count-increasing-quadruplets",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 33.99748322147651,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Enumeration",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:11.140346"
  },
  "2641": {
    "id": 2641,
    "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
    "title_slug": "disconnect-path-in-a-binary-matrix-by-at-most-one-flip",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 27.40866421413168,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:11.841183"
  },
  "2690": {
    "id": 2690,
    "title": "House Robber IV",
    "title_slug": "house-robber-iv",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 65.06996216006635,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:12.738215"
  },
  "2710": {
    "id": 2710,
    "title": "Minimum Operations to Reduce an Integer to 0",
    "title_slug": "minimum-operations-to-reduce-an-integer-to-0",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 58.25431129537335,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Bit Manipulation"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:13.655110"
  },
  "2709": {
    "id": 2709,
    "title": "Count the Number of Square-Free Subsets",
    "title_slug": "count-the-number-of-square-free-subsets",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 25.50206050859383,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:14.368243"
  },
  "2708": {
    "id": 2708,
    "title": "Find the String with LCP",
    "title_slug": "find-the-string-with-lcp",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 31.807614065678578,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming",
      "Greedy",
      "Union Find",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:15.274099"
  },
  "2652": {
    "id": 2652,
    "title": "Count Number of Possible Root Nodes",
    "title_slug": "count-number-of-possible-root-nodes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 47.023809523809526,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:16.201496"
  },
  "2648": {
    "id": 2648,
    "title": "Number of Ways to Earn Points",
    "title_slug": "number-of-ways-to-earn-points",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 58.835827464788736,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:17.200359"
  },
  "2696": {
    "id": 2696,
    "title": "The Number of Beautiful Subsets",
    "title_slug": "the-number-of-beautiful-subsets",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 50.82959470151861,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Sorting",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:18.172511"
  },
  "2669": {
    "id": 2669,
    "title": "Find the Substring With Maximum Cost",
    "title_slug": "find-the-substring-with-maximum-cost",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 57.167420115142384,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:18.750620"
  },
  "2720": {
    "id": 2720,
    "title": "Minimize the Maximum Difference of Pairs",
    "title_slug": "minimize-the-maximum-difference-of-pairs",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 50.911136037498196,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:19.542155"
  },
  "2697": {
    "id": 2697,
    "title": "Minimum Number of Visited Cells in a Grid",
    "title_slug": "minimum-number-of-visited-cells-in-a-grid",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 23.005356037812348,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Breadth-First Search",
      "Union Find",
      "Heap (Priority Queue)",
      "Matrix",
      "Monotonic Stack"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:20.416356"
  },
  "2738": {
    "id": 2738,
    "title": "Count the Number of K-Free Subsets",
    "title_slug": "count-the-number-of-k-free-subsets",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 46.879039704524466,
    "paid_only": true,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Sorting",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:21.197147"
  },
  "2736": {
    "id": 2736,
    "title": "Minimum Additions to Make Valid String",
    "title_slug": "minimum-additions-to-make-valid-string",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 50.45055353720285,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Stack",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:22.005606"
  },
  "2739": {
    "id": 2739,
    "title": "Minimize the Total Price of the Trips",
    "title_slug": "minimize-the-total-price-of-the-trips",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 46.55556815175906,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Graph"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:22.891838"
  },
  "2780": {
    "id": 2780,
    "title": "Make Costs of Paths Equal in a Binary Tree",
    "title_slug": "make-costs-of-paths-equal-in-a-binary-tree",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 57.296842548045326,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Tree",
      "Binary Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:23.817341"
  },
  "2784": {
    "id": 2784,
    "title": "Power of Heroes",
    "title_slug": "power-of-heroes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 30.21562000576384,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Sorting",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:24.669355"
  },
  "2794": {
    "id": 2794,
    "title": "Maximum Number of Moves in a Grid",
    "title_slug": "maximum-number-of-moves-in-a-grid",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 58.818360923028145,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:25.421963"
  },
  "2755": {
    "id": 2755,
    "title": "Extra Characters in a String",
    "title_slug": "extra-characters-in-a-string",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 57.10947711443083,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Trie"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:26.001902"
  },
  "2754": {
    "id": 2754,
    "title": "Maximum Strength of a Group",
    "title_slug": "maximum-strength-of-a-group",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 24.964417265672495,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Greedy",
      "Bit Manipulation",
      "Sorting",
      "Enumeration"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:26.927663"
  },
  "2817": {
    "id": 2817,
    "title": "Minimum Cost to Make All Characters Equal",
    "title_slug": "minimum-cost-to-make-all-characters-equal",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 53.61652983856795,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:27.639114"
  },
  "2818": {
    "id": 2818,
    "title": "Maximum Strictly Increasing Cells in a Matrix",
    "title_slug": "maximum-strictly-increasing-cells-in-a-matrix",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 30.801587771787432,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Memoization",
      "Sorting",
      "Matrix",
      "Ordered Set"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:28.176519"
  },
  "2757": {
    "id": 2757,
    "title": "Count of Integers",
    "title_slug": "count-of-integers",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 37.46230722839666,
    "paid_only": false,
    "tags": [
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:29.083338"
  },
  "2848": {
    "id": 2848,
    "title": "Special Permutations",
    "title_slug": "special-permutations",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 28.775220134507386,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:29.776154"
  },
  "2808": {
    "id": 2808,
    "title": "Painting the Walls",
    "title_slug": "painting-the-walls",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 48.64627906672425,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:30.693375"
  },
  "2850": {
    "id": 2850,
    "title": "Construct the Longest New String",
    "title_slug": "construct-the-longest-new-string",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 54.0415451095659,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Greedy",
      "Brainteaser"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:31.708939"
  },
  "2854": {
    "id": 2854,
    "title": "Decremental String Concatenation",
    "title_slug": "decremental-string-concatenation",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 26.591338087248324,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:32.386663"
  },
  "2867": {
    "id": 2867,
    "title": "Ways to Split Array Into Good Subarrays",
    "title_slug": "ways-to-split-array-into-good-subarrays",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 34.140249249329045,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:33.271174"
  },
  "2883": {
    "id": 2883,
    "title": "Partition String Into Minimum Beautiful Substrings",
    "title_slug": "partition-string-into-minimum-beautiful-substrings",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 53.08658121893801,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Backtracking"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:33.802155"
  },
  "2855": {
    "id": 2855,
    "title": "Maximum Number of Jumps to Reach the Last Index",
    "title_slug": "maximum-number-of-jumps-to-reach-the-last-index",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 31.699256673269655,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:34.375044"
  },
  "2869": {
    "id": 2869,
    "title": "Longest Non-decreasing Subarray From Two Arrays",
    "title_slug": "longest-non-decreasing-subarray-from-two-arrays",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 30.139716787741953,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:35.345077"
  },
  "2893": {
    "id": 2893,
    "title": "Visit Array Positions to Maximize Score",
    "title_slug": "visit-array-positions-to-maximize-score",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 36.83031786405593,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:36.041515"
  },
  "2882": {
    "id": 2882,
    "title": "Ways to Express an Integer as Sum of Powers",
    "title_slug": "ways-to-express-an-integer-as-sum-of-powers",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 50.06567297993948,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:36.937885"
  },
  "2905": {
    "id": 2905,
    "title": "Count Paths That Can Form a Palindrome in a Tree",
    "title_slug": "count-paths-that-can-form-a-palindrome-in-a-tree",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 45.854728284124946,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Bit Manipulation",
      "Tree",
      "Depth-First Search",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:37.610286"
  },
  "2921": {
    "id": 2921,
    "title": "Count Stepping Numbers in Range",
    "title_slug": "count-stepping-numbers-in-range",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 26.577453588175608,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:38.577527"
  },
  "2952": {
    "id": 2952,
    "title": "Minimum Time to Make Array Sum At Most x",
    "title_slug": "minimum-time-to-make-array-sum-at-most-x",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 25.847963967276407,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:39.172364"
  },
  "2916": {
    "id": 2916,
    "title": "Check if it is Possible to Split Array",
    "title_slug": "check-if-it-is-possible-to-split-array",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 34.05198938992042,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:40.100951"
  },
  "2904": {
    "id": 2904,
    "title": "Sorting Three Groups",
    "title_slug": "sorting-three-groups",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 42.14020459641256,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:40.967822"
  },
  "3017": {
    "id": 3017,
    "title": "Number of Beautiful Integers in the Range",
    "title_slug": "number-of-beautiful-integers-in-the-range",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 20.247148288973385,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:41.779981"
  },
  "2979": {
    "id": 2979,
    "title": "Maximize the Profit as the Salesman",
    "title_slug": "maximize-the-profit-as-the-salesman",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 37.42849521325469,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:42.511797"
  },
  "3032": {
    "id": 3032,
    "title": "Maximize Value of Function in a Ball Passing Game",
    "title_slug": "maximize-value-of-function-in-a-ball-passing-game",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 29.33372641509434,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:43.078613"
  },
  "3092": {
    "id": 3092,
    "title": "Minimum Moves to Spread Stones Over Grid",
    "title_slug": "minimum-moves-to-spread-stones-over-grid",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 44.53570797100285,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Breadth-First Search",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:43.630076"
  },
  "3024": {
    "id": 3024,
    "title": "String Transformation",
    "title_slug": "string-transformation",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 25.436064750909775,
    "paid_only": false,
    "tags": [
      "Math",
      "String",
      "Dynamic Programming",
      "String Matching"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:44.059792"
  },
  "3105": {
    "id": 3105,
    "title": "Minimum Edge Reversals So Every Node Is Reachable",
    "title_slug": "minimum-edge-reversals-so-every-node-is-reachable",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 55.50421675937556,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:44.755893"
  },
  "3112": {
    "id": 3112,
    "title": "Count Valid Paths in a Tree",
    "title_slug": "count-valid-paths-in-a-tree",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 35.03441059282811,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Number Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:45.710013"
  },
  "3140": {
    "id": 3140,
    "title": "Count Visited Nodes in a Directed Graph",
    "title_slug": "count-visited-nodes-in-a-directed-graph",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 29.36903184538767,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Graph",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:46.467412"
  },
  "3177": {
    "id": 3177,
    "title": "Minimizing Array After Replacing Pairs With Their Product",
    "title_slug": "minimizing-array-after-replacing-pairs-with-their-product",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 40.28030106410589,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:46.922943"
  },
  "3033": {
    "id": 3033,
    "title": "Apply Operations to Make Two Strings Equal",
    "title_slug": "apply-operations-to-make-two-strings-equal",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 27.324814354103054,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:47.628715"
  },
  "3143": {
    "id": 3143,
    "title": "Longest Unequal Adjacent Groups Subsequence I",
    "title_slug": "longest-unequal-adjacent-groups-subsequence-i",
    "difficulty": "Easy",
    "status": "NOT_STARTED",
    "ac_rate": 67.30328273299858,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:48.322329"
  },
  "3142": {
    "id": 3142,
    "title": "Longest Unequal Adjacent Groups Subsequence II",
    "title_slug": "longest-unequal-adjacent-groups-subsequence-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.38159095342676,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:49.039839"
  },
  "3091": {
    "id": 3091,
    "title": "Count of Sub-Multisets With Bounded Sum",
    "title_slug": "count-of-sub-multisets-with-bounded-sum",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 20.819977046974554,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:49.877176"
  },
  "2879": {
    "id": 2879,
    "title": "Minimum Changes to Make K Semi-palindromes",
    "title_slug": "minimum-changes-to-make-k-semi-palindromes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 35.07607398568019,
    "paid_only": false,
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:50.302747"
  },
  "3198": {
    "id": 3198,
    "title": "Number of Ways to Reach Destination in the Grid",
    "title_slug": "number-of-ways-to-reach-destination-in-the-grid",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 59.04198062432723,
    "paid_only": true,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:51.212140"
  },
  "3106": {
    "id": 3106,
    "title": "Length of the Longest Subsequence That Sums to Target",
    "title_slug": "length-of-the-longest-subsequence-that-sums-to-target",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 38.21584485200314,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:51.854702"
  },
  "3139": {
    "id": 3139,
    "title": "Subarrays Distinct Element Sum of Squares II",
    "title_slug": "subarrays-distinct-element-sum-of-squares-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 21.155672823218996,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:53.034299"
  },
  "3178": {
    "id": 3178,
    "title": "Minimum Increment Operations to Make Array Beautiful",
    "title_slug": "minimum-increment-operations-to-make-array-beautiful",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 34.119193503932834,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:53.544603"
  },
  "3179": {
    "id": 3179,
    "title": "Maximum Points After Collecting Coins From All Nodes",
    "title_slug": "maximum-points-after-collecting-coins-from-all-nodes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 35.863165119387354,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Tree",
      "Depth-First Search",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:54.262069"
  },
  "3191": {
    "id": 3191,
    "title": "Maximum Score After Applying Operations on a Tree",
    "title_slug": "maximum-score-after-applying-operations-on-a-tree",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 46.48138928749231,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:55.217328"
  },
  "3184": {
    "id": 3184,
    "title": "Maximum Balanced Subsequence Sum",
    "title_slug": "maximum-balanced-subsequence-sum",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 25.061359671171306,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Binary Indexed Tree",
      "Segment Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:55.733917"
  },
  "3200": {
    "id": 3200,
    "title": "Number of Strings Which Can Be Rearranged to Contain Substring",
    "title_slug": "number-of-strings-which-can-be-rearranged-to-contain-substring",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 55.7899901864573,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:56.411264"
  },
  "3209": {
    "id": 3209,
    "title": "Minimum Number of Coins for Fruits",
    "title_slug": "minimum-number-of-coins-for-fruits",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 47.37937430723641,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:57.167858"
  },
  "3211": {
    "id": 3211,
    "title": "Find Maximum Non-decreasing Array Length",
    "title_slug": "find-maximum-non-decreasing-array-length",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 17.23360908754167,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Stack",
      "Queue",
      "Monotonic Stack",
      "Monotonic Queue"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:58.143644"
  },
  "3230": {
    "id": 3230,
    "title": "Remove Adjacent Almost-Equal Characters",
    "title_slug": "remove-adjacent-almost-equal-characters",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 52.126990367603696,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:58.883816"
  },
  "3268": {
    "id": 3268,
    "title": "Minimum Number of Coins for Fruits II",
    "title_slug": "minimum-number-of-coins-for-fruits-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 45.662847790507364,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Heap (Priority Queue)",
      "Monotonic Queue"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:24:59.481375"
  },
  "3218": {
    "id": 3218,
    "title": "Find Number of Coins to Place in Tree Nodes",
    "title_slug": "find-number-of-coins-to-place-in-tree-nodes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 36.674106352074254,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:00.031835"
  },
  "3238": {
    "id": 3238,
    "title": "Minimum Cost to Convert String II",
    "title_slug": "minimum-cost-to-convert-string-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 25.76218876423239,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming",
      "Graph",
      "Trie",
      "Shortest Path"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:01.023155"
  },
  "3273": {
    "id": 3273,
    "title": "Most Expensive Item That Can Not Be Bought",
    "title_slug": "most-expensive-item-that-can-not-be-bought",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 80.23626227767454,
    "paid_only": true,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Number Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:01.701942"
  },
  "3294": {
    "id": 3294,
    "title": "Number of Self-Divisible Permutations",
    "title_slug": "number-of-self-divisible-permutations",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 71.62756598240469,
    "paid_only": true,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Number Theory",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:02.363024"
  },
  "3239": {
    "id": 3239,
    "title": "Minimum Number of Operations to Make X and Y Equal",
    "title_slug": "minimum-number-of-operations-to-make-x-and-y-equal",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 47.760007395765925,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Breadth-First Search",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:02.866331"
  },
  "3243": {
    "id": 3243,
    "title": "Count the Number of Powerful Integers",
    "title_slug": "count-the-number-of-powerful-integers",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 46.43768160269154,
    "paid_only": false,
    "tags": [
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:03.888062"
  },
  "3233": {
    "id": 3233,
    "title": "Maximize the Number of Partitions After Operations",
    "title_slug": "maximize-the-number-of-partitions-after-operations",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 27.7556270096463,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:04.756204"
  },
  "3304": {
    "id": 3304,
    "title": "Maximum Subtree of the Same Color",
    "title_slug": "maximum-subtree-of-the-same-color",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 57.50358680057389,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:05.278681"
  },
  "3240": {
    "id": 3240,
    "title": "Maximum Number That Sum of the Prices Is Less Than or Equal to K",
    "title_slug": "maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 37.3907696291022,
    "paid_only": false,
    "tags": [
      "Binary Search",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:05.936285"
  },
  "3323": {
    "id": 3323,
    "title": "Maximum Number of Removal Queries That Can Be Processed I",
    "title_slug": "maximum-number-of-removal-queries-that-can-be-processed-i",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 43.574593796159526,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:06.806970"
  },
  "3343": {
    "id": 3343,
    "title": "Count Numbers With Unique Digits II",
    "title_slug": "count-numbers-with-unique-digits-ii",
    "difficulty": "Easy",
    "status": "NOT_STARTED",
    "ac_rate": 87.08191953465827,
    "paid_only": true,
    "tags": [
      "Hash Table",
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:07.381989"
  },
  "3318": {
    "id": 3318,
    "title": "Maximum Number of Operations With the Same Score II",
    "title_slug": "maximum-number-of-operations-with-the-same-score-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 33.28978200667471,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Memoization"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:07.836637"
  },
  "3298": {
    "id": 3298,
    "title": "Maximize Consecutive Elements in an Array After Modification",
    "title_slug": "maximize-consecutive-elements-in-an-array-after-modification",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 32.83002038735984,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:08.456831"
  },
  "3307": {
    "id": 3307,
    "title": "Find the Maximum Sum of Node Values",
    "title_slug": "find-the-maximum-sum-of-node-values",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 69.69382167658603,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Bit Manipulation",
      "Tree",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:09.710615"
  },
  "3313": {
    "id": 3313,
    "title": "Maximum Strength of K Disjoint Subarrays",
    "title_slug": "maximum-strength-of-k-disjoint-subarrays",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 26.96078431372549,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:10.281992"
  },
  "3345": {
    "id": 3345,
    "title": "Find the Sum of the Power of All Subsequences",
    "title_slug": "find-the-sum-of-the-power-of-all-subsequences",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 36.948354869339056,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:10.793131"
  },
  "3316": {
    "id": 3316,
    "title": "Find the Sum of Subsequence Powers",
    "title_slug": "find-the-sum-of-subsequence-powers",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 23.739744323602366,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:11.777685"
  },
  "3364": {
    "id": 3364,
    "title": "Minimum Sum of Values by Dividing Array",
    "title_slug": "minimum-sum-of-values-by-dividing-array",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 27.205468783801322,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Bit Manipulation",
      "Segment Tree",
      "Queue"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:12.308768"
  },
  "3404": {
    "id": 3404,
    "title": "Minimum Number of Operations to Satisfy Conditions",
    "title_slug": "minimum-number-of-operations-to-satisfy-conditions",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 40.93750726254387,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:13.092328"
  },
  "3406": {
    "id": 3406,
    "title": "Find All Possible Stable Binary Arrays I",
    "title_slug": "find-all-possible-stable-binary-arrays-i",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 26.388259292837716,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:13.740159"
  },
  "3407": {
    "id": 3407,
    "title": "Find All Possible Stable Binary Arrays II",
    "title_slug": "find-all-possible-stable-binary-arrays-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 26.253608109015236,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:14.638734"
  },
  "3441": {
    "id": 3441,
    "title": "Equalize Strings by Adding or Removing Characters at Ends",
    "title_slug": "equalize-strings-by-adding-or-removing-characters-at-ends",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 55.73770491803278,
    "paid_only": true,
    "tags": [
      "String",
      "Binary Search",
      "Dynamic Programming",
      "Sliding Window",
      "Hash Function"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:15.314101"
  },
  "3403": {
    "id": 3403,
    "title": "Minimum Substring Partition of Equal Character Frequency",
    "title_slug": "minimum-substring-partition-of-equal-character-frequency",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 39.25793792365323,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Counting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:16.138150"
  },
  "3391": {
    "id": 3391,
    "title": "Maximum Difference Score in a Grid",
    "title_slug": "maximum-difference-score-in-a-grid",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 47.01877676512572,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:16.724056"
  },
  "3431": {
    "id": 3431,
    "title": "Find the Minimum Cost Array Permutation",
    "title_slug": "find-the-minimum-cost-array-permutation",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 24.09615084930653,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:17.521597"
  },
  "3414": {
    "id": 3414,
    "title": "Find Number of Ways to Reach the K-th Stair",
    "title_slug": "find-number-of-ways-to-reach-the-k-th-stair",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 36.48347139230118,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Memoization",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:18.326130"
  },
  "3423": {
    "id": 3423,
    "title": "Maximum Sum of Subsequence With Non-adjacent Elements",
    "title_slug": "maximum-sum-of-subsequence-with-non-adjacent-elements",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 14.935507171602518,
    "paid_only": false,
    "tags": [
      "Array",
      "Divide and Conquer",
      "Dynamic Programming",
      "Segment Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:19.153247"
  },
  "3456": {
    "id": 3456,
    "title": "Find the Maximum Length of a Good Subsequence I",
    "title_slug": "find-the-maximum-length-of-a-good-subsequence-i",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 31.802218793622806,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:20.066879"
  },
  "3452": {
    "id": 3452,
    "title": "Find the Maximum Length of a Good Subsequence II",
    "title_slug": "find-the-maximum-length-of-a-good-subsequence-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 24.106513215424105,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:20.813036"
  },
  "3442": {
    "id": 3442,
    "title": "Maximum Total Reward Using Operations I",
    "title_slug": "maximum-total-reward-using-operations-i",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 30.145802957717144,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:21.686690"
  },
  "3443": {
    "id": 3443,
    "title": "Maximum Total Reward Using Operations II",
    "title_slug": "maximum-total-reward-using-operations-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 20.82088960541269,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:22.091761"
  },
  "3489": {
    "id": 3489,
    "title": "The Number of Ways to Make the Sum",
    "title_slug": "the-number-of-ways-to-make-the-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 51.03402268178786,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:22.889311"
  },
  "3437": {
    "id": 3437,
    "title": "Maximum Total Damage With Spell Casting",
    "title_slug": "maximum-total-damage-with-spell-casting",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 28.055492792263546,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Dynamic Programming",
      "Sorting",
      "Counting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:23.743698"
  },
  "3477": {
    "id": 3477,
    "title": "Minimum Operations to Make Binary Array Elements Equal to One II",
    "title_slug": "minimum-operations-to-make-binary-array-elements-equal-to-one-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 64.25788336251637,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:24.485968"
  },
  "3460": {
    "id": 3460,
    "title": "Count the Number of Inversions",
    "title_slug": "count-the-number-of-inversions",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 28.252347224509965,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:25.246816"
  },
  "3464": {
    "id": 3464,
    "title": "Maximize Total Cost of Alternating Subarrays",
    "title_slug": "maximize-total-cost-of-alternating-subarrays",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 28.882575757575758,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:25.676306"
  },
  "3490": {
    "id": 3490,
    "title": "Find the Maximum Length of Valid Subsequence I",
    "title_slug": "find-the-maximum-length-of-valid-subsequence-i",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 54.750117774814555,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:27.337011"
  },
  "3491": {
    "id": 3491,
    "title": "Find the Maximum Length of Valid Subsequence II",
    "title_slug": "find-the-maximum-length-of-valid-subsequence-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 57.345210280373834,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:27.951755"
  },
  "3513": {
    "id": 3513,
    "title": "Maximum Array Hopping Score I",
    "title_slug": "maximum-array-hopping-score-i",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 77.66497461928934,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:28.607280"
  },
  "3482": {
    "id": 3482,
    "title": "Construct String with Minimum Cost",
    "title_slug": "construct-string-with-minimum-cost",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 19.072562941880005,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Dynamic Programming",
      "Suffix Array"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:29.373239"
  },
  "3494": {
    "id": 3494,
    "title": "Minimum Cost for Cutting Cake I",
    "title_slug": "minimum-cost-for-cutting-cake-i",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 57.814013242415264,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:30.037893"
  },
  "3470": {
    "id": 3470,
    "title": "Maximum Score From Grid Operations",
    "title_slug": "maximum-score-from-grid-operations",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 24.823222925195385,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:30.920399"
  },
  "3454": {
    "id": 3454,
    "title": "Minimum Operations to Make Array Equal to Target",
    "title_slug": "minimum-operations-to-make-array-equal-to-target",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 38.93446053402528,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:31.722086"
  },
  "3532": {
    "id": 3532,
    "title": "Time Taken to Mark All Nodes",
    "title_slug": "time-taken-to-mark-all-nodes",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 25.47965890922011,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search",
      "Graph"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:32.456824"
  },
  "3537": {
    "id": 3537,
    "title": "Number of Subsequences with Odd Sum",
    "title_slug": "number-of-subsequences-with-odd-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 47.08311822405783,
    "paid_only": true,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:33.090756"
  },
  "3535": {
    "id": 3535,
    "title": "Find the Count of Monotonic Pairs I",
    "title_slug": "find-the-count-of-monotonic-pairs-i",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 46.8005898421447,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Combinatorics",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:33.775528"
  },
  "3536": {
    "id": 3536,
    "title": "Find the Count of Monotonic Pairs II",
    "title_slug": "find-the-count-of-monotonic-pairs-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 23.269433865651102,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Combinatorics",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:34.628083"
  },
  "3550": {
    "id": 3550,
    "title": "Maximum Value Sum by Placing Three Rooks I",
    "title_slug": "maximum-value-sum-by-placing-three-rooks-i",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 15.413435109158074,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix",
      "Enumeration"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:35.733571"
  },
  "3542": {
    "id": 3542,
    "title": "Maximum Value Sum by Placing Three Rooks II",
    "title_slug": "maximum-value-sum-by-placing-three-rooks-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 26.435412891535076,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix",
      "Enumeration"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:36.328041"
  },
  "3525": {
    "id": 3525,
    "title": "Maximum Energy Boost From Two Drinks",
    "title_slug": "maximum-energy-boost-from-two-drinks",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 49.49681659478332,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:37.032940"
  },
  "3552": {
    "id": 3552,
    "title": "Find the Largest Palindrome Divisible by K",
    "title_slug": "find-the-largest-palindrome-divisible-by-k",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 15.559666262018998,
    "paid_only": false,
    "tags": [
      "Math",
      "String",
      "Dynamic Programming",
      "Greedy",
      "Number Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:37.732118"
  },
  "3586": {
    "id": 3586,
    "title": "Constructing Two Increasing Arrays",
    "title_slug": "constructing-two-increasing-arrays",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 61.174785100286535,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:38.600870"
  },
  "3563": {
    "id": 3563,
    "title": "Select Cells in Grid With Maximum Score",
    "title_slug": "select-cells-in-grid-with-maximum-score",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 14.588444073281487,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Matrix",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:39.215124"
  },
  "3551": {
    "id": 3551,
    "title": "Maximum XOR Score Subarray Queries",
    "title_slug": "maximum-xor-score-subarray-queries",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 42.58760107816711,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:39.764762"
  },
  "3602": {
    "id": 3602,
    "title": "Sum of Consecutive Subarrays",
    "title_slug": "sum-of-consecutive-subarrays",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 42.169408897014016,
    "paid_only": true,
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:40.563481"
  },
  "3575": {
    "id": 3575,
    "title": "Find the Maximum Sequence Value of Array",
    "title_slug": "find-the-maximum-sequence-value-of-array",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 19.243681265676248,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:41.467813"
  },
  "3518": {
    "id": 3518,
    "title": "Maximum Multiplication Score",
    "title_slug": "maximum-multiplication-score",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 40.95973992320196,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:41.993579"
  },
  "3559": {
    "id": 3559,
    "title": "Minimum Number of Valid Strings to Form Target I",
    "title_slug": "minimum-number-of-valid-strings-to-form-target-i",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 20.395792754187767,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Binary Search",
      "Dynamic Programming",
      "Trie",
      "Segment Tree",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:42.595713"
  },
  "3557": {
    "id": 3557,
    "title": "Minimum Number of Valid Strings to Form Target II",
    "title_slug": "minimum-number-of-valid-strings-to-form-target-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 18.440509971623836,
    "paid_only": false,
    "tags": [
      "Array",
      "String",
      "Binary Search",
      "Dynamic Programming",
      "Segment Tree",
      "Rolling Hash",
      "String Matching",
      "Hash Function"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:43.270711"
  },
  "3623": {
    "id": 3623,
    "title": "Sum of Consecutive Subsequences",
    "title_slug": "sum-of-consecutive-subsequences",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 41.15384615384615,
    "paid_only": true,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:43.659822"
  },
  "3584": {
    "id": 3584,
    "title": "Find the Lexicographically Smallest Valid Sequence",
    "title_slug": "find-the-lexicographically-smallest-valid-sequence",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 20.666063893911996,
    "paid_only": false,
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:44.248227"
  },
  "3487": {
    "id": 3487,
    "title": "Find Maximum Removals From Source String",
    "title_slug": "find-maximum-removals-from-source-string",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 38.38240878180124,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:45.037102"
  },
  "3604": {
    "id": 3604,
    "title": "Find the Number of Possible Ways for an Event",
    "title_slug": "find-the-number-of-possible-ways-for-an-event",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 33.67886461666899,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:45.512587"
  },
  "3588": {
    "id": 3588,
    "title": "Count The Number of Winning Sequences",
    "title_slug": "count-the-number-of-winning-sequences",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 31.377317373590625,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:45.923007"
  },
  "3587": {
    "id": 3587,
    "title": "Maximum Points Tourist Can Earn",
    "title_slug": "maximum-points-tourist-can-earn",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 46.62622177283451,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:46.402171"
  },
  "3618": {
    "id": 3618,
    "title": "Find the Original Typed String II",
    "title_slug": "find-the-original-typed-string-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 46.06982179769513,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:47.094333"
  },
  "3629": {
    "id": 3629,
    "title": "Total Characters in String After Transformations I",
    "title_slug": "total-characters-in-string-after-transformations-i",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 45.74753984921267,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "Math",
      "String",
      "Dynamic Programming",
      "Counting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:48.358207"
  },
  "3608": {
    "id": 3608,
    "title": "Find the Number of Subsequences With Equal GCD",
    "title_slug": "find-the-number-of-subsequences-with-equal-gcd",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 29.29776762172614,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Number Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:49.223843"
  },
  "3630": {
    "id": 3630,
    "title": "Total Characters in String After Transformations II",
    "title_slug": "total-characters-in-string-after-transformations-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 58.16835381569609,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "Math",
      "String",
      "Dynamic Programming",
      "Counting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:50.685053"
  },
  "3614": {
    "id": 3614,
    "title": "Find the Number of K-Even Arrays",
    "title_slug": "find-the-number-of-k-even-arrays",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 58.313539192399055,
    "paid_only": true,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:52.015306"
  },
  "3637": {
    "id": 3637,
    "title": "Count Number of Balanced Permutations",
    "title_slug": "count-number-of-balanced-permutations",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 49.330463082242865,
    "paid_only": false,
    "tags": [
      "Math",
      "String",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:52.694749"
  },
  "3646": {
    "id": 3646,
    "title": "Sum of Good Subsequences",
    "title_slug": "sum-of-good-subsequences",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 30.029052563619736,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:53.543918"
  },
  "3631": {
    "id": 3631,
    "title": "Count K-Reducible Numbers Less Than N",
    "title_slug": "count-k-reducible-numbers-less-than-n",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 25.71558088330527,
    "paid_only": false,
    "tags": [
      "Math",
      "String",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:54.246424"
  },
  "3648": {
    "id": 3648,
    "title": "Find the Maximum Number of Fruits Collected",
    "title_slug": "find-the-maximum-number-of-fruits-collected",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 65.43872693388437,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:55.333294"
  },
  "3654": {
    "id": 3654,
    "title": "Minimum Array Sum",
    "title_slug": "minimum-array-sum",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 29.923809919242668,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:56.134757"
  },
  "3675": {
    "id": 3675,
    "title": "Maximize Sum of Weights after Edge Removals",
    "title_slug": "maximize-sum-of-weights-after-edge-removals",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 29.05243648158159,
    "paid_only": false,
    "tags": [
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:56.673679"
  },
  "3649": {
    "id": 3649,
    "title": "Minimum Time to Break Locks I",
    "title_slug": "minimum-time-to-break-locks-i",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 30.842968672793752,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Backtracking",
      "Bit Manipulation",
      "Depth-First Search",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:57.468843"
  },
  "3686": {
    "id": 3686,
    "title": "Count Beautiful Splits in an Array",
    "title_slug": "count-beautiful-splits-in-an-array",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 16.13656918902623,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:58.261615"
  },
  "3638": {
    "id": 3638,
    "title": "Minimum Operations to Make Character Frequencies Equal",
    "title_slug": "minimum-operations-to-make-character-frequencies-equal",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 25.191905094207957,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Counting",
      "Enumeration"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:59.013239"
  },
  "3659": {
    "id": 3659,
    "title": "Count Paths With the Given XOR Value",
    "title_slug": "count-paths-with-the-given-xor-value",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 39.92617216976322,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:25:59.894750"
  },
  "3716": {
    "id": 3716,
    "title": "Longest Subsequence With Decreasing Adjacent Difference",
    "title_slug": "longest-subsequence-with-decreasing-adjacent-difference",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 14.95472914215561,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:00.617884"
  },
  "3688": {
    "id": 3688,
    "title": "Maximize Subarray Sum After Removing All Occurrences of One Element",
    "title_slug": "maximize-subarray-sum-after-removing-all-occurrences-of-one-element",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 20.33582089552239,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Segment Tree"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:01.407546"
  },
  "3562": {
    "id": 3562,
    "title": "Maximum Score of Non-overlapping Intervals",
    "title_slug": "maximum-score-of-non-overlapping-intervals",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 30.424808836023786,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:02.045957"
  },
  "3677": {
    "id": 3677,
    "title": "Maximum Amount of Money Robot Can Earn",
    "title_slug": "maximum-amount-of-money-robot-can-earn",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 28.879510557258698,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:02.806534"
  },
  "3714": {
    "id": 3714,
    "title": "Maximum and Minimum Sums of at Most Size K Subsequences",
    "title_slug": "maximum-and-minimum-sums-of-at-most-size-k-subsequences",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 20.567745179013897,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Sorting",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:03.796185"
  },
  "3737": {
    "id": 3737,
    "title": "Paint House IV",
    "title_slug": "paint-house-iv",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 44.05506883604506,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:04.418238"
  },
  "3751": {
    "id": 3751,
    "title": "Maximum Frequency After Subarray Operation",
    "title_slug": "maximum-frequency-after-subarray-operation",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 29.038393800634026,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming",
      "Greedy",
      "Enumeration",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:05.185153"
  },
  "3701": {
    "id": 3701,
    "title": "Minimum Cost Good Caption",
    "title_slug": "minimum-cost-good-caption",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 19.294535034454526,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:05.791977"
  },
  "3697": {
    "id": 3697,
    "title": "Minimum Increments for Target Multiples in an Array",
    "title_slug": "minimum-increments-for-target-multiples-in-an-array",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 25.82025048509437,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Number Theory",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:06.551004"
  },
  "3696": {
    "id": 3696,
    "title": "Count Substrings Divisible By Last Digit",
    "title_slug": "count-substrings-divisible-by-last-digit",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 21.220825852782767,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:07.170351"
  },
  "3771": {
    "id": 3771,
    "title": "Select K Disjoint Special Substrings",
    "title_slug": "select-k-disjoint-special-substrings",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 18.06358116412599,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Greedy",
      "Sorting"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:07.763078"
  },
  "3733": {
    "id": 3733,
    "title": "Length of Longest V-Shaped Diagonal Segment",
    "title_slug": "length-of-longest-v-shaped-diagonal-segment",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 33.9263953204972,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Memoization",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:08.314414"
  },
  "3806": {
    "id": 3806,
    "title": "Maximum Coin Collection ",
    "title_slug": "maximum-coin-collection",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 52.99283568292119,
    "paid_only": true,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:09.144705"
  },
  "3776": {
    "id": 3776,
    "title": "Find Minimum Cost to Remove Array Elements",
    "title_slug": "find-minimum-cost-to-remove-array-elements",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 19.703129079178012,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:09.697937"
  },
  "3786": {
    "id": 3786,
    "title": "Longest Palindromic Subsequence After at Most K Operations",
    "title_slug": "longest-palindromic-subsequence-after-at-most-k-operations",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 36.667274099914096,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:10.849699"
  },
  "3722": {
    "id": 3722,
    "title": "Sum of K Subarrays With Length at Least M",
    "title_slug": "sum-of-k-subarrays-with-length-at-least-m",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 25.068439577630038,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:11.464948"
  },
  "3795": {
    "id": 3795,
    "title": "Zero Array Transformation IV",
    "title_slug": "zero-array-transformation-iv",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 30.010545433241546,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:12.376176"
  },
  "3801": {
    "id": 3801,
    "title": "Count Beautiful Numbers",
    "title_slug": "count-beautiful-numbers",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 21.39113621330077,
    "paid_only": false,
    "tags": [
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:12.777538"
  },
  "3765": {
    "id": 3765,
    "title": "Minimum Cost to Divide Array Into Subarrays",
    "title_slug": "minimum-cost-to-divide-array-into-subarrays",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 23.59336392516767,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:13.479414"
  },
  "3793": {
    "id": 3793,
    "title": "Longest Palindrome After Substring Concatenation I",
    "title_slug": "longest-palindrome-after-substring-concatenation-i",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 43.36129893981134,
    "paid_only": false,
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming",
      "Enumeration"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:14.054303"
  },
  "3808": {
    "id": 3808,
    "title": "Longest Palindrome After Substring Concatenation II",
    "title_slug": "longest-palindrome-after-substring-concatenation-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 16.15902436079331,
    "paid_only": false,
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:15.068414"
  },
  "3717": {
    "id": 3717,
    "title": "Minimum Operations to Make Elements Within K Subarrays Equal",
    "title_slug": "minimum-operations-to-make-elements-within-k-subarrays-equal",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 27.266204257354698,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Sliding Window",
      "Heap (Priority Queue)"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:15.845912"
  },
  "3777": {
    "id": 3777,
    "title": "Maximum Product of Subsequences With an Alternating Sum Equal to K",
    "title_slug": "maximum-product-of-subsequences-with-an-alternating-sum-equal-to-k",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 11.419152194792721,
    "paid_only": false,
    "tags": [
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:16.693632"
  },
  "3810": {
    "id": 3810,
    "title": "Count Numbers with Non-Decreasing Digits ",
    "title_slug": "count-numbers-with-non-decreasing-digits",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 34.714030997119735,
    "paid_only": false,
    "tags": [
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:17.309826"
  },
  "3831": {
    "id": 3831,
    "title": "Find X Value of Array I",
    "title_slug": "find-x-value-of-array-i",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 33.82780579379394,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:18.026698"
  },
  "3826": {
    "id": 3826,
    "title": "Maximum Profit from Valid Topological Order in DAG",
    "title_slug": "maximum-profit-from-valid-topological-order-in-dag",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 27.599687255668492,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Graph",
      "Topological Sort",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:18.978941"
  },
  "3841": {
    "id": 3841,
    "title": "Concatenated Divisibility",
    "title_slug": "concatenated-divisibility",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 26.35690080983286,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:19.889088"
  },
  "3833": {
    "id": 3833,
    "title": "Merge Operations for Minimum Travel Time",
    "title_slug": "merge-operations-for-minimum-travel-time",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 27.742788274628722,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:20.429715"
  },
  "3851": {
    "id": 3851,
    "title": "Find Sum of Array Product of Magical Sequences",
    "title_slug": "find-sum-of-array-product-of-magical-sequences",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 23.25874125874126,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Bit Manipulation",
      "Combinatorics",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:20.991093"
  },
  "3856": {
    "id": 3856,
    "title": "Maximum Weighted K-Edge Path",
    "title_slug": "maximum-weighted-k-edge-path",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 18.867781155015198,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "Dynamic Programming",
      "Graph"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:21.608863"
  },
  "3858": {
    "id": 3858,
    "title": "Subtree Inversion Sum",
    "title_slug": "subtree-inversion-sum",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 41.576242147344374,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:22.138120"
  },
  "3857": {
    "id": 3857,
    "title": "Find Maximum Number of Non Intersecting Substrings",
    "title_slug": "find-maximum-number-of-non-intersecting-substrings",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 29.17618959375708,
    "paid_only": false,
    "tags": [
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:23.125769"
  },
  "3842": {
    "id": 3842,
    "title": "Number of Ways to Assign Edge Weights II",
    "title_slug": "number-of-ways-to-assign-edge-weights-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 60.62428704759929,
    "paid_only": false,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:23.709977"
  },
  "3854": {
    "id": 3854,
    "title": "Maximum Profit from Trading Stocks with Discounts",
    "title_slug": "maximum-profit-from-trading-stocks-with-discounts",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 20.31727027835977,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:24.466059"
  },
  "3867": {
    "id": 3867,
    "title": "Lexicographically Smallest String After Adjacent Removals",
    "title_slug": "lexicographically-smallest-string-after-adjacent-removals",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 15.070813532207216,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:25.422045"
  },
  "3892": {
    "id": 3892,
    "title": "Best Time to Buy and Sell Stock V",
    "title_slug": "best-time-to-buy-and-sell-stock-v",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 40.01992246392418,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:26.039301"
  },
  "3875": {
    "id": 3875,
    "title": "Maximum Good Subtree Score",
    "title_slug": "maximum-good-subtree-score",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 44.12640256468972,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Tree",
      "Depth-First Search",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:26.772948"
  },
  "3835": {
    "id": 3835,
    "title": "Count Partitions With Max-Min Difference at Most K",
    "title_slug": "count-partitions-with-max-min-difference-at-most-k",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 37.11651436031332,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Queue",
      "Sliding Window",
      "Prefix Sum",
      "Monotonic Queue"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:27.209944"
  },
  "3866": {
    "id": 3866,
    "title": "Minimum Steps to Convert String with Operations",
    "title_slug": "minimum-steps-to-convert-string-with-operations",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 40.697537410156706,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:28.123214"
  },
  "3900": {
    "id": 3900,
    "title": "Find Weighted Median Node in Tree",
    "title_slug": "find-weighted-median-node-in-tree",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 23.250033588606744,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:28.880308"
  },
  "3903": {
    "id": 3903,
    "title": "Inverse Coin Change",
    "title_slug": "inverse-coin-change",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 49.55338273831328,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:29.294044"
  },
  "3909": {
    "id": 3909,
    "title": "Minimum Increments to Equalize Leaf Paths",
    "title_slug": "minimum-increments-to-equalize-leaf-paths",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 40.69322327890424,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Tree",
      "Depth-First Search"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:29.831220"
  },
  "3896": {
    "id": 3896,
    "title": "Minimum Time to Transport All Individuals",
    "title_slug": "minimum-time-to-transport-all-individuals",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 25.56941968706675,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Graph",
      "Heap (Priority Queue)",
      "Shortest Path",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:30.825653"
  },
  "3913": {
    "id": 3913,
    "title": "Partition Array to Minimize XOR",
    "title_slug": "partition-array-to-minimize-xor",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 39.99357326478149,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Bit Manipulation",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:31.411696"
  },
  "3927": {
    "id": 3927,
    "title": "Minimum Cost Path with Alternating Directions II",
    "title_slug": "minimum-cost-path-with-alternating-directions-ii",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 43.89703635808127,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:31.969384"
  },
  "3949": {
    "id": 3949,
    "title": "Minimum Number of Primes to Sum to Target",
    "title_slug": "minimum-number-of-primes-to-sum-to-target",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 59.523809523809526,
    "paid_only": true,
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Number Theory"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:32.399764"
  },
  "3930": {
    "id": 3930,
    "title": "Longest Palindromic Path in Graph",
    "title_slug": "longest-palindromic-path-in-graph",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 16.984000579164555,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Bit Manipulation",
      "Graph",
      "Bitmask"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:32.883025"
  },
  "3919": {
    "id": 3919,
    "title": "Network Recovery Pathways",
    "title_slug": "network-recovery-pathways",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 30.113852896341463,
    "paid_only": false,
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Graph",
      "Topological Sort",
      "Heap (Priority Queue)",
      "Shortest Path"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:33.518905"
  },
  "3937": {
    "id": 3937,
    "title": "Number of Integers With Popcount-Depth Equal to K I",
    "title_slug": "number-of-integers-with-popcount-depth-equal-to-k-i",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 19.76343026121242,
    "paid_only": false,
    "tags": [
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:34.481675"
  },
  "3948": {
    "id": 3948,
    "title": "Maximum Number of Subsequences After One Inserting",
    "title_slug": "maximum-number-of-subsequences-after-one-inserting",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 24.21988109540092,
    "paid_only": false,
    "tags": [
      "String",
      "Dynamic Programming",
      "Greedy",
      "Prefix Sum"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:34.922693"
  },
  "3954": {
    "id": 3954,
    "title": "Maximum Balanced Shipments",
    "title_slug": "maximum-balanced-shipments",
    "difficulty": "Medium",
    "status": "NOT_STARTED",
    "ac_rate": 54.58876723590299,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming",
      "Stack",
      "Greedy",
      "Monotonic Stack"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:35.736110"
  },
  "3956": {
    "id": 3956,
    "title": "Trionic Array II",
    "title_slug": "trionic-array-ii",
    "difficulty": "Hard",
    "status": "NOT_STARTED",
    "ac_rate": 19.840427789330732,
    "paid_only": false,
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "content": "",
    "example_testcases": "",
    "code_snippets": [],
    "last_updated": "2025-08-19T00:26:36.570247"
  }
}